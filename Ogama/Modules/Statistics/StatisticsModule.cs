// <copyright file="StatisticsModule.cs" company="FU Berlin">
// ******************************************************
// OGAMA - open gaze and mouse analyzer 
// Copyright (C) 2010 Adrian Voßkühler  
// ------------------------------------------------------------------------
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// **************************************************************
// </copyright>
// <author>Adrian Voßkühler</author>
// <email>adrian.vosskuehler@fu-berlin.de</email>

namespace Ogama.Modules.Statistics
{
  using System;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Data;
  using System.Drawing;
  using System.Drawing.Drawing2D;
  using System.Drawing.Text;
  using System.IO;
  using System.Text;
  using System.Windows.Forms;

  using Ogama.DataSet;
  using Ogama.DataSet.OgamaDataSetTableAdapters;
  using Ogama.ExceptionHandling;
  using Ogama.MainWindow;
  using Ogama.Modules.Common;
  using VectorGraphics;
  using VectorGraphics.Elements;

  /// <summary>
  /// Inherits <see cref="FormWithInterface"/>
  /// This class is the statistics module. 
  /// This class calculates a lot of parameters useful for further analysis.
  /// The parameters can be selected in the form and are generated by filling 
  /// a datagrid view. This data grid can be exported to a SPSS readable format.
  /// </summary>
  /// <remarks>Calculation is done only for the selected subjects.</remarks>
  public partial class StatisticsModule : FormWithInterface
  {
    ///////////////////////////////////////////////////////////////////////////////
    // Defining Constants                                                        //
    ///////////////////////////////////////////////////////////////////////////////
    #region CONSTANTS
    #endregion //CONSTANTS

    ///////////////////////////////////////////////////////////////////////////////
    // Defining Variables, Enumerations, Events                                  //
    ///////////////////////////////////////////////////////////////////////////////
    #region FIELDS

    /// <summary>
    /// Tolerance value for widening areas of interest to get a better hit rate
    /// </summary>
    private int tolerance;

    /// <summary>
    /// Flags. Stores the variable selection states for subject parameters.
    /// </summary>
    private SubjectParams subjectParams;

    /// <summary>
    /// Flags. Stores the variable selection states for trial parameters.
    /// </summary>
    private TrialParams trialParams;

    /// <summary>
    /// Flags. Stores the variable selection states for gaze parameters.
    /// </summary>
    private GazeParams gazeParams;

    /// <summary>
    /// Stores a list of custom gaze variables.
    /// </summary>
    private List<CustomVariable> gazeCustomParams;

    /// <summary>
    /// Flags. Stores the variable selection states for mouse parameters.
    /// </summary>
    private MouseParams mouseParams;

    /// <summary>
    /// Stores a list of custom mouse variables.
    /// </summary>
    private List<CustomVariable> mouseCustomParams;

    /// <summary>
    /// Stores a list of AOI groups available from the AOI interface
    /// </summary>
    private List<string> aoiGroups;

    /// <summary>
    /// Saves the location of the mouse click.
    /// </summary>
    private Point mouseClickLocation;

    /// <summary>
    /// Stores a list of all selected default variables.
    /// </summary>
    private Dictionary<string, DefaultVariable> defaultVariables;

    #endregion //FIELDS

    ///////////////////////////////////////////////////////////////////////////////
    // Construction and Initializing methods                                     //
    ///////////////////////////////////////////////////////////////////////////////
    #region CONSTRUCTION

    /// <summary>
    /// Initializes a new instance of the StatisticsModule class.
    /// </summary>
    public StatisticsModule()
    {
      // Init
      this.InitializeComponent();

      this.InitAccelerators();
      this.InitializeDataBindings();
      this.InitializeCustomElements();
    }

    #endregion //CONSTRUCTION

    ///////////////////////////////////////////////////////////////////////////////
    // Defining Enumerations                                                     //
    ///////////////////////////////////////////////////////////////////////////////
    #region ENUMS

    /// <summary>
    /// Delegate to get a DataGridViewRow from backgroundworker
    /// </summary>
    /// <returns><see cref="DataGridViewRow"/> from statistics standard data grid view</returns>
    private delegate DataGridViewRow AsyncAddStandardsRowMethodCaller();

    /// <summary>
    /// Delegate to get a DataGridViewRow from backgroundworker
    /// </summary>
    /// <returns><see cref="DataGridViewRow"/> from statistics transitions data grid view</returns>
    private delegate DataGridViewRow AsyncAddTransitionsRowMethodCaller();

    #endregion ENUMS

    ///////////////////////////////////////////////////////////////////////////////
    // Defining Properties                                                       //
    ///////////////////////////////////////////////////////////////////////////////
    #region PROPERTIES
    #endregion //PROPERTIES

    ///////////////////////////////////////////////////////////////////////////////
    // Inherited methods                                                         //
    ///////////////////////////////////////////////////////////////////////////////
    #region OVERRIDES

    /// <summary>
    /// Causes the controls bound to the BindingSources to reread all the 
    /// items in the list and refresh their displayed values. 
    /// </summary>
    public override void ResetDataBindings()
    {
      base.ResetDataBindings();
      PopulateSubjectTreeView(this.trvSubjects);
      PopulateSubjectTreeView(this.trvTransitionsSubjects);
    }

    /// <summary>
    /// This methods is used to initialize elements that are not
    /// initialized in the designer.
    /// </summary>
    protected override void InitializeCustomElements()
    {
      base.InitializeCustomElements();

      PopulateSubjectTreeView(this.trvSubjects);
      PopulateSubjectTreeView(this.trvTransitionsSubjects);

      // Designer BUG hack
      this.tosTransitions.Visible = true;

      // initialization of custom variables
      this.gazeCustomParams = new List<CustomVariable>();
      this.mouseCustomParams = new List<CustomVariable>();

      this.defaultVariables = new Dictionary<string, DefaultVariable>();

      this.CreateSubjectVariables();
      this.CreateTrialVariables();
      this.CreateGazeVariables();
      this.CreateMouseVariables();
      this.btnHelp.Click += new EventHandler(this.btnHelp_Click);

      this.chbSubjectDefault_CheckedChanged(this.chbSUBID, EventArgs.Empty);
      this.tolerance = 10;

      this.cbbMouseClickButton.Items.AddRange(Enum.GetNames(typeof(MouseButtons)));

      DataTable customParameters = Document.ActiveDocument.DocDataSet.ParamsAdapter.GetData();
      foreach (DataRow row in customParameters.Rows)
      {
        this.clbSUBCustomparameters.Items.Add(row["Param"], false);
      }

      this.PopulateAOIGroupCombo();

      this.InitTrialTreeViews();
    }

    /// <summary>
    /// Initializes accelerator keys. Binds to methods.
    /// </summary>
    protected override void InitAccelerators()
    {
      this.SetAccelerator(Keys.Escape, new AcceleratorAction(this.OnEscape));
    }

    #endregion //OVERRIDES

    ///////////////////////////////////////////////////////////////////////////////
    // Eventhandler                                                              //
    ///////////////////////////////////////////////////////////////////////////////
    #region EVENTS

    ///////////////////////////////////////////////////////////////////////////////
    // Eventhandler for UI, Menu, Buttons, Toolbars etc.                         //
    ///////////////////////////////////////////////////////////////////////////////
    #region WINDOWSEVENTHANDLER

    /// <summary>
    /// The <see cref="Form.FormClosing"/> event handler. 
    /// Cancels the closing if background threads are busy.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">The <see cref="FormClosingEventArgs"/> with the event data.</param>
    private void frmStatistics_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (this.bgwCalculateStandards.IsBusy || this.bgwCalculateTransitions.IsBusy)
      {
        string message = "Calculation in progress, " + Environment.NewLine +
          "please wait for finish or abort calculation (ESC) before closing form.";
        ExceptionMethods.ProcessMessage("Module is busy", message);
        e.Cancel = true;
      }
    }

    /// <summary>
    /// The <see cref="TreeView.AfterCheck"/> event handler for the
    /// <see cref="TreeView"/> <see cref="trvSubjects"/>.
    /// Checks or unchecks all subjects in the category node
    /// that is clicked.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void trvSubjects_AfterCheck(object sender, TreeViewEventArgs e)
    {
      if (e.Node.ImageKey == "Category")
      {
        foreach (TreeNode subjectNode in e.Node.Nodes)
        {
          subjectNode.Checked = e.Node.Checked;
        }
      }
    }

    #region ContextMenu

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="ToolStripMenuItem"/> <see cref="cmuRecalculate"/>.
    /// Context menu recalulation clicked.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cmuRecalculate_Click(object sender, EventArgs e)
    {
      this.StartStandardCalculation();
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="ToolStripMenuItem"/> <see cref="cmuRemoveColumn"/>.
    /// Context menu delete column clicked.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cmuRemoveColumn_Click(object sender, EventArgs e)
    {
      int index = this.dGVExportTable.HitTest(this.mouseClickLocation.X, this.mouseClickLocation.Y).ColumnIndex;
      if (index <= this.dGVExportTable.Columns.Count && index >= 0)
      {
        string currentColumnName = this.dGVExportTable.Columns[index].Name;
        if (this.dGVExportTable.Columns[currentColumnName] != null)
        {
          this.dGVExportTable.Columns.Remove(currentColumnName);
          foreach (DefaultVariable var in this.defaultVariables.Values)
          {
            if (var.ColumnName == currentColumnName)
            {
              var.CheckBox.Checked = false;
              if (var is SubjectVariable)
              {
                this.subjectParams &= ~((SubjectVariable)var).Flag;
              }
              else if (var is TrialVariable)
              {
                this.trialParams &= ~((TrialVariable)var).Flag;
              }
              else if (var is GazeVariable)
              {
                this.gazeParams &= ~((GazeVariable)var).Flag;
              }
              else if (var is MouseVariable)
              {
                this.mouseParams &= ~((MouseVariable)var).Flag;
              }

              break;
            }
          }

          foreach (CustomVariable var in this.gazeCustomParams)
          {
            if (var.ColumnName == currentColumnName)
            {
              this.gazeCustomParams.Remove(var);
              break;
            }
          }

          foreach (CustomVariable var in this.mouseCustomParams)
          {
            if (var.ColumnName == currentColumnName)
            {
              this.mouseCustomParams.Remove(var);
              break;
            }
          }
        }
      }
    }

    #endregion ContextMenu

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="RadioButton"/> <see cref="rdbGazeAOIGroup"/>
    /// Updates radio button states.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void rdbGazeAOIGroup_Click(object sender, EventArgs e)
    {
      if (!this.rdbGazeAOIGroup.Checked)
      {
        this.rdbGazeAOIGroup.Checked = true;
        this.rdbGazeAOISingle.Checked = false;
      }
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="RadioButton"/> <see cref="rdbGazeAOISingle"/>
    /// Updates radio button states.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void rdbGazeAOISingle_Click(object sender, EventArgs e)
    {
      if (!this.rdbGazeAOISingle.Checked)
      {
        this.rdbGazeAOISingle.Checked = true;
        this.rdbGazeAOIGroup.Checked = false;
      }
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="RadioButton"/> <see cref="rdbMouseAOIGroup"/>
    /// Updates radio button states.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void rdbMouseAOIGroup_Click(object sender, EventArgs e)
    {
      if (!this.rdbMouseAOIGroup.Checked)
      {
        this.rdbMouseAOIGroup.Checked = true;
        this.rdbMouseAOISingle.Checked = false;
      }
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="RadioButton"/> <see cref="rdbMouseAOISingle"/>
    /// Updates radio button states.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void rdbMouseAOISingle_Click(object sender, EventArgs e)
    {
      if (!this.rdbMouseAOISingle.Checked)
      {
        this.rdbMouseAOISingle.Checked = true;
        this.rdbMouseAOIGroup.Checked = false;
      }
    }

    /// <summary>
    /// The <see cref="TreeView.AfterCheck"/> event handler for the
    /// <see cref="TreeView"/> <see cref="trvTrialsAOI"/>.
    /// Checks or unchecks all trials in the category node
    /// that is clicked.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void trvTrialsAOI_AfterCheck(object sender, TreeViewEventArgs e)
    {
      if (e.Node.Level == 0)
      {
        foreach (TreeNode stimulusNode in e.Node.Nodes)
        {
          stimulusNode.Checked = e.Node.Checked;
        }
      }
    }

    /// <summary>
    /// The <see cref="TreeView.AfterCheck"/> event handler for the
    /// <see cref="TreeView"/> <see cref="trvTrialsDefault"/>.
    /// Checks or unchecks all trials in the category node
    /// that is clicked.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void trvTrialsDefault_AfterCheck(object sender, TreeViewEventArgs e)
    {
      // Category Level
      if (e.Node.Level == 0)
      {
        foreach (TreeNode stimulusNode in e.Node.Nodes)
        {
          stimulusNode.Checked = e.Node.Checked;
        }
      }
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aoi groups.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbGazeRegressionAOIGroups_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOIGroupCombo();
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aoi groups.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbGazeAOIGroups_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOIGroupCombo();
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aoi groups.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbMouseAOIGroup_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOIGroupCombo();
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aois.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbGazeAOISingle_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOISingleCombo(this.cbbGazeAOISingle);
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aois.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbMouseAOISingle_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOISingleCombo(this.cbbMouseAOISingle);
    }

    /// <summary>
    /// The <see cref="ComboBox.DropDown"/> event handler 
    /// which updates the aois.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void cbbGazeRegressionAOISingle_DropDown(object sender, EventArgs e)
    {
      this.PopulateAOISingleCombo(this.cbbGazeRegressionAOISingle);
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnStandardSelectAllTrials"/>.
    /// User decided to Select all trials for calculation so
    /// check them in the check box list.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnStandardSelectAllTrials_Click(object sender, EventArgs e)
    {
      this.CheckOrUncheckTreeviewItems(this.trvTrialsDefault, true);
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnStandardDeselectAllTrials"/>.
    /// User decided to deselect all trials for calculation so
    /// uncheck them in the check box list.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnStandardDeselectAllTrials_Click(object sender, EventArgs e)
    {
      this.CheckOrUncheckTreeviewItems(this.trvTrialsDefault, false);
    }

    /// <summary>
    /// The <see cref="Control.MouseDown"/> event handler for the
    /// <see cref="DataGridView"/> <see cref="dGVExportTable"/>.
    /// Saves the mouse click position for use in context menu.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void dGVExportTable_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseClickLocation = e.Location;
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnGazeAddCustomVariable"/>.
    /// User added a custom defined variable, so set the flag and add it to
    /// the list of variables. Show an error, if missing AOI Group.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnGazeAddCustomVariable_Click(object sender, EventArgs e)
    {
      if (this.rdbGazeAOIGroup.Checked)
      {
        if (this.cbbGazeAOIGroups.Text == string.Empty)
        {
          string message = "Please specify an AOI Group by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No group selected", message);
          return;
        }

        this.CreateCustomGazeParam(true);
      }
      else
      {
        if (this.cbbGazeAOISingle.Text == string.Empty)
        {
          string message = "Please specify an AOI by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No AOI selected", message);
          return;
        }

        this.CreateCustomGazeParam(false);
      }
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnGazeAddCustomRegressionVariable"/>.
    /// User added a custom defined regression variable, so set the flag and add it to
    /// the list of variables. Show an error, if missing AOI Group.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnGazeAddCustomRegressionVariable_Click(object sender, EventArgs e)
    {
      if (this.rdbGazeRegressionAOISingle.Checked)
      {
        if (this.cbbGazeRegressionAOISingle.Text == string.Empty)
        {
          string message = "Please specify an AOI by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No AOI selected", message);
          return;
        }

        this.CreateCustomGazeRegressionParam(true, false);
      }

      if (this.rdbGazeRegressionAOIGroup.Checked)
      {
        if (this.cbbGazeRegressionAOIGroups.Text == string.Empty)
        {
          string message = "Please specify an AOI Group by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No group selected", message);
          return;
        }

        this.CreateCustomGazeRegressionParam(true, true);
      }
      else
      {
        this.CreateCustomGazeRegressionParam(false, false);
      }
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnMouseAddCustomVariable"/>.
    /// User added a custom defined variable, so set the flag and add it to
    /// the list of variables. Show an error, if missing AOI Group.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnMouseAddCustomVariable_Click(object sender, EventArgs e)
    {
      if (this.rdbMouseAOIGroup.Checked)
      {
        if (this.cbbMouseAOIGroup.Text == string.Empty)
        {
          string message = "Please specify an AOI Group by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No group selected", message);
          return;
        }

        this.CreateCustomMouseParam(true);
      }
      else
      {
        if (this.cbbMouseAOISingle.Text == string.Empty)
        {
          string message = "Please specify an AOI by selecting from the drop down combo box";
          ExceptionMethods.ProcessMessage("No AOI selected", message);
          return;
        }

        this.CreateCustomMouseParam(false);
      }
    }

    #region SubjectCheckboxes

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnTransitionsSelectAllTrials"/>.
    /// User decided to Select all trials for calculation so
    /// check them in the check box list.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnTransitionsSelectAllTrials_Click(object sender, EventArgs e)
    {
      this.CheckOrUncheckTreeviewItems(this.trvTrialsAOI, true);
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnTransitionsDeselectAllTrials"/>.
    /// User decided to deselect all trials for calculation so
    /// uncheck them in the check box list.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnTransitionsDeselectAllTrials_Click(object sender, EventArgs e)
    {
      this.CheckOrUncheckTreeviewItems(this.trvTrialsAOI, false);
    }

    /// <summary>
    /// User switched a default check box in Tab "Subject information".
    /// Add referring column to datagridview table and set analysis flag.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void chbSubjectDefault_CheckedChanged(object sender, EventArgs e)
    {
      CheckBox chbSender = (CheckBox)sender;
      SubjectVariable var = (SubjectVariable)this.defaultVariables[chbSender.Name];
      this.InsertOrRemoveColumn(chbSender.Checked, var);
      if (chbSender.Checked)
      {
        this.subjectParams |= var.Flag;
      }
      else
      {
        this.subjectParams &= ~var.Flag;
      }
    }

    /// <summary>
    /// The <see cref="CheckedListBox.ItemCheck"/> event handler.
    /// Inserts or removes the selected custom subject parameter
    /// from the statistics output table.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An <see cref="ItemCheckEventArgs"/> with the event data.</param>
    private void clbSUBCustomparameters_ItemCheck(object sender, ItemCheckEventArgs e)
    {
      SubjectVariable var = (SubjectVariable)this.defaultVariables["SUB_C" + e.Index.ToString()];
      bool isChecked = e.NewValue == CheckState.Checked ? true : false;
      this.InsertOrRemoveColumn(isChecked, var);
      if (isChecked)
      {
        this.subjectParams |= var.Flag;
      }
      else
      {
        this.subjectParams &= ~var.Flag;
      }
    }

    #endregion //SubjectCheckboxes

    #region TrialCheckboxes

    /// <summary>
    /// User switched default check box in Tab "Trial information".
    /// Add referring column to datagridview table and set analysis flag.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void chbTrialDefault_CheckedChanged(object sender, EventArgs e)
    {
      CheckBox chbSender = (CheckBox)sender;
      TrialVariable var = (TrialVariable)this.defaultVariables[chbSender.Name];
      this.InsertOrRemoveColumn(chbSender.Checked, var);
      if (chbSender.Checked)
      {
        this.trialParams |= var.Flag;
      }
      else
      {
        this.trialParams &= ~var.Flag;
      }
    }

    #endregion //TrialCheckboxes

    #region GazeCheckboxes

    /// <summary>
    /// User switched default check box in Tab "Gaze parameters".
    /// Add referring column to datagridview table and set analysis flag.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void chbGazeDefault_CheckedChanged(object sender, EventArgs e)
    {
      CheckBox chbSender = (CheckBox)sender;
      GazeVariable var = (GazeVariable)this.defaultVariables[chbSender.Name];
      this.InsertOrRemoveColumn(chbSender.Checked, var);
      if (chbSender.Checked)
      {
        this.gazeParams |= var.Flag;
      }
      else
      {
        this.gazeParams &= ~var.Flag;
      }
    }

    #endregion //GazeCheckboxes

    #region MouseCheckboxes

    /// <summary>
    /// User switched default check box in Tab "Mouse parameters".
    /// Add referring column to datagridview table and set analysis flag.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void chbMouseDefault_CheckedChanged(object sender, EventArgs e)
    {
      CheckBox chbSender = (CheckBox)sender;
      MouseVariable var = (MouseVariable)this.defaultVariables[chbSender.Name];
      this.InsertOrRemoveColumn(chbSender.Checked, var);
      if (chbSender.Checked)
      {
        this.mouseParams |= var.Flag;
      }
      else
      {
        this.mouseParams &= ~var.Flag;
      }
    }

    #endregion //MouseCheckboxes

    #region OtherOptions

    /// <summary>
    /// User changed value of numeri up and down for areas of interest
    /// widening
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void nudTolerance_ValueChanged(object sender, EventArgs e)
    {
      this.tolerance = (int)this.nudTolerance.Value;
    }

    #endregion //OtherOptions

    #region ToolbarButtons

    /// <summary>
    /// User clicked main calculation button. 
    /// So invoke backgroundworker with current settings.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnFillWithData_Click(object sender, EventArgs e)
    {
      this.StartStandardCalculation();
    }

    /// <summary>
    /// User clicked cancel button. So stop calculating.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnCancelCalculation_Click(object sender, EventArgs e)
    {
      this.OnEscape();
    }

    /// <summary>
    /// User clicked export button, so open save file dialog
    /// to ask for filename and save content of statistics data grid view 
    /// into the file.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnExport_Click(object sender, EventArgs e)
    {
      // Ask for and open Logfiles
      if (this.sfdExport.ShowDialog() == DialogResult.OK)
      {
        string filenameExport = this.sfdExport.FileName;
        using (StreamWriter sw = new StreamWriter(filenameExport))
        {
          // Write Column Names
          foreach (DataGridViewColumn dataColumn in this.dGVExportTable.Columns)
          {
            sw.Write(dataColumn.HeaderText);
            sw.Write("\t");
          }

          sw.WriteLine();

          // Write Data To File
          foreach (DataGridViewRow dataRow in this.dGVExportTable.Rows)
          {
            foreach (DataGridViewCell cell in dataRow.Cells)
            {
              sw.Write(cell.Value);
              sw.Write("\t");
            }

            sw.WriteLine();
          }
        }
      }
    }

    /// <summary>
    /// User clicked select all button so check or uncheck all checkboxes.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnSelectAll_Click(object sender, EventArgs e)
    {
      CheckState shouldSelect = this.btnSelectAll.Checked ? CheckState.Checked : CheckState.Unchecked;

      // Subject checkboxes
      this.chbSUBCategory.CheckState = shouldSelect;
      this.chbSUBAge.CheckState = shouldSelect;
      this.chbSUBSex.CheckState = shouldSelect;
      this.chbSUBHandedness.CheckState = shouldSelect;

      this.chbSUBComments.CheckState = shouldSelect;

      // Trial checkboxes
      this.chbTRITrialID.CheckState = shouldSelect;
      this.chbTRIName.CheckState = shouldSelect;
      this.chbTRISequence.CheckState = shouldSelect;
      this.chbTRICategory.CheckState = shouldSelect;
      this.chbTRIDuration.CheckState = shouldSelect;
      this.chbTRIStarttime.CheckState = shouldSelect;

      this.chbTRITargetsize.CheckState = shouldSelect;
      this.chbTRIAOISize.CheckState = shouldSelect;

      this.chbTRIDataLoss.CheckState = shouldSelect;
      this.chbTRIDataLossPC.CheckState = shouldSelect;
      this.chbTRISamplesOutOfMonitor.CheckState = shouldSelect;
      this.chbTRISamplesOutOfMonitorPC.CheckState = shouldSelect;

      this.chbTRIResponse.CheckState = shouldSelect;
      this.chbTRIResponseCorrectness.CheckState = shouldSelect;
      this.chbTRIAOIofResponse.CheckState = shouldSelect;
      this.chbTRIEliminate.CheckState = shouldSelect;

      // Gaze checkboxes
      this.chbGAZFixations.CheckState = shouldSelect;
      this.chbGAZFixationsPS.CheckState = shouldSelect;
      this.chbGAZCountFix2FirstClick.CheckState = shouldSelect;
      this.chbGAZFixDurationMean.CheckState = shouldSelect;
      this.chbGAZFixDurationMedian.CheckState = shouldSelect;
      this.chbGAZFixationSaccadesRatio.CheckState = shouldSelect;

      this.chbGAZSaccadeLength.CheckState = shouldSelect;
      this.chbGAZSaccadeVelocity.CheckState = shouldSelect;

      this.chbGAZTime2FirstFixInSearchRect.CheckState = shouldSelect;
      this.chbGAZTime2FirstFixAtTarget.CheckState = shouldSelect;
      this.chbGAZTime2SecondFixAtTarget.CheckState = shouldSelect;
      this.chbGAZFixTimeAtTarget.CheckState = shouldSelect;

      this.chbGAZPathlength.CheckState = shouldSelect;
      this.chbGAZPathlengthPS.CheckState = shouldSelect;

      // Mouse checkboxes
      this.chbMSEFixations.CheckState = shouldSelect;
      this.chbMSEFixationsPS.CheckState = shouldSelect;
      this.chbMSECountFix2FirstClick.CheckState = shouldSelect;
      this.chbMSEFixDurationMean.CheckState = shouldSelect;
      this.chbMSEFixDurationMedian.CheckState = shouldSelect;
      this.chbMSEFixationSaccadesRatio.CheckState = shouldSelect;
      this.chbMSESaccadeLength.CheckState = shouldSelect;
      this.chbMSESaccadeVelocity.CheckState = shouldSelect;

      this.chbMSELeftClicks.CheckState = shouldSelect;
      this.chbMSELeftClicksPS.CheckState = shouldSelect;
      this.chbMSERightClicks.CheckState = shouldSelect;
      this.chbMSERightClicksPS.CheckState = shouldSelect;

      this.chbMSETime2FirstFixInSearchRect.CheckState = shouldSelect;
      this.chbMSETime2FirstFixAtTarget.CheckState = shouldSelect;
      this.chbMSETime2SecondFixAtTarget.CheckState = shouldSelect;
      this.chbMSEFixTimeAtTarget.CheckState = shouldSelect;
      this.chbMSETime2FirstClick.CheckState = shouldSelect;

      this.chbMSEPathlength.CheckState = shouldSelect;
      this.chbMSEPathlengthPS.CheckState = shouldSelect;
      this.chbMSEAverageDistance.CheckState = shouldSelect;
    }

    /// <summary>
    /// User clicked main calculation button. 
    /// So invoke backgroundworker with current settings.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnTransitionsStartCalculation_Click(object sender, EventArgs e)
    {
      this.StartTransitionsCalculation();
    }

    /// <summary>
    /// User clicked cancel button. So stop calculating.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnTransitionsAbortCalculation_Click(object sender, EventArgs e)
    {
      this.OnEscape();
    }

    /// <summary>
    /// User clicked export button, so open save file dialog
    /// to ask for filename and save content of statistics data grid view 
    /// into the file.
    /// </summary>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnTransitionsExportTable_Click(object sender, EventArgs e)
    {
      // Ask for and open Logfiles
      if (this.sfdExport.ShowDialog() == DialogResult.OK)
      {
        string filenameExport = this.sfdExport.FileName;
        using (StreamWriter sw = new StreamWriter(filenameExport))
        {
          // Write Column Names
          foreach (DataGridViewColumn dataColumn in this.dgvTransitions.Columns)
          {
            sw.Write(dataColumn.HeaderText);
            sw.Write("\t");
          }

          sw.WriteLine();

          // Write Data To File
          foreach (DataGridViewRow dataRow in this.dgvTransitions.Rows)
          {
            foreach (DataGridViewCell cell in dataRow.Cells)
            {
              sw.Write(cell.Value);
              sw.Write("\t");
            }

            sw.WriteLine();
          }
        }
      }
    }

    #endregion ToolbarButtons

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnEye"/>.
    /// </summary>
    /// <remarks>If neither gaze nor mouse buttons would be
    /// active check the mouse button.</remarks>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnEye_Click(object sender, EventArgs e)
    {
      this.btnMouse.Checked = !this.btnEye.Checked;
    }

    /// <summary>
    /// The <see cref="Control.Click"/> event handler for the
    /// <see cref="Button"/> <see cref="btnMouse"/>.
    /// </summary>
    /// <remarks>If neither gaze nor mouse buttons would be
    /// active check the gaze button.</remarks>
    /// <param name="sender">Source of the event.</param>
    /// <param name="e">An empty <see cref="EventArgs"/></param>
    private void btnMouse_Click(object sender, EventArgs e)
    {
      this.btnEye.Checked = !this.btnMouse.Checked;
    }

    #endregion //WINDOWSEVENTHANDLER

    ///////////////////////////////////////////////////////////////////////////////
    // Eventhandler for Custom Defined Events                                    //
    ///////////////////////////////////////////////////////////////////////////////
    #region CUSTOMEVENTHANDLER

    /// <summary>
    /// Breaks backgroundworker when user pressed escape button
    /// </summary>
    private void OnEscape()
    {
      if (this.tacMeta.SelectedTab == this.tbpMetaStandard)
      {
        if (this.bgwCalculateStandards.IsBusy)
        {
          this.Cursor = Cursors.WaitCursor;
          this.bgwCalculateStandards.CancelAsync();
        }
      }
      else
      {
        if (this.bgwCalculateTransitions.IsBusy)
        {
          this.Cursor = Cursors.WaitCursor;
          this.bgwCalculateTransitions.CancelAsync();
        }
      }
    }

    #endregion //CUSTOMEVENTHANDLER

    #endregion //EVENTS

    ///////////////////////////////////////////////////////////////////////////////
    // Methods and Eventhandling for Background tasks                            //
    ///////////////////////////////////////////////////////////////////////////////
    #region BACKGROUNDWORKER

    /// <summary>
    /// Background worker thread working method for calculating
    /// the statistics table to settings in UI.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An <see cref="DoWorkEventArgs"/> with the event data.</param>
    private void bgwCalculation_DoWork(object sender, DoWorkEventArgs e)
    {
      // Get the BackgroundWorker that raised this event.
      BackgroundWorker worker = sender as BackgroundWorker;

      // Start Calculation
      this.FillWithData(worker, e);
    }

    /// <summary>
    /// This event handler deals with the results of the
    /// background operation and updates the UI.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">A <see cref="RunWorkerCompletedEventArgs"/> with the event data.</param>
    private void bgwCalculation_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
      this.Cursor = Cursors.Default;

      // First, handle the case where an exception was thrown.
      if (e.Error != null)
      {
        ExceptionMethods.HandleException(e.Error);
      }
      else if (e.Cancelled)
      {
        ((MainForm)this.MdiParent).StatusLabel.Text = "Status: Statistics calculation cancelled.";
      }
      else
      {
        // Finally, handle the case where the operation succeeded.
        ((MainForm)this.MdiParent).StatusLabel.Text = "Ready";
      }

      ((MainForm)this.MdiParent).StatusProgressbar.Value = 0;

      // Enable the Start button.
      this.btnFillWithData.Enabled = true;

      // Reenable UI
      this.EnableStandardUI(true);
    }

    /// <summary>
    /// This event handler updates the progress bar in MDI Parent form.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">A <see cref="ProgressChangedEventArgs"/> with the event data.</param>
    private void bgwCalculation_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      ((MainForm)this.MdiParent).StatusLabel.Text = (string)e.UserState;
      ((MainForm)this.MdiParent).StatusProgressbar.Value = e.ProgressPercentage;
    }

    /// <summary>
    /// Background worker thread working method for calculating
    /// the transitions table.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">An <see cref="DoWorkEventArgs"/> with the event data.</param>
    private void bgwCalculateTransitions_DoWork(object sender, DoWorkEventArgs e)
    {
      // Get the BackgroundWorker that raised this event.
      BackgroundWorker worker = sender as BackgroundWorker;

      // Start Calculation
      this.FillTransitionsWithData(worker, e);
    }

    /// <summary>
    /// This event handler deals with the results of the
    /// background operation and updates the UI.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">A <see cref="RunWorkerCompletedEventArgs"/> with the event data.</param>
    private void bgwCalculateTransitions_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
      this.Cursor = Cursors.Default;

      // First, handle the case where an exception was thrown.
      if (e.Error != null)
      {
        ExceptionMethods.HandleException(e.Error);
      }
      else if (e.Cancelled)
      {
        ((MainForm)this.MdiParent).StatusLabel.Text = "Status: Statistics calculation cancelled.";
      }
      else
      {
        // Finally, handle the case where the operation succeeded.
        ((MainForm)this.MdiParent).StatusLabel.Text = "Ready";
      }

      ((MainForm)this.MdiParent).StatusProgressbar.Value = 0;

      // Enable the Start button.
      this.btnTransitionsStartCalculation.Enabled = true;
    }

    /// <summary>
    /// This event handler updates the progress bar in MDI Parent form.
    /// </summary>
    /// <param name="sender">Source of the event</param>
    /// <param name="e">A <see cref="ProgressChangedEventArgs"/> with the event data</param>
    private void bgwCalculateTransitions_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      ((MainForm)this.MdiParent).StatusLabel.Text = (string)e.UserState;
      ((MainForm)this.MdiParent).StatusProgressbar.Value = e.ProgressPercentage;
    }

    #endregion //BACKGROUNDWORKER

    ///////////////////////////////////////////////////////////////////////////////
    // Methods for doing main class job                                          //
    ///////////////////////////////////////////////////////////////////////////////
    #region METHODS

    /// <summary>
    /// Populates the given ComboBox with all available AOI names.
    /// </summary>
    /// <param name="aoiSingleCombo">The <see cref="ComboBox"/>
    /// which items should be filled.</param>
    private void PopulateAOISingleCombo(ComboBox aoiSingleCombo)
    {
      aoiSingleCombo.Items.Clear();

      List<int> selectedTrials = GetSelectedTrials(this.trvTrialsDefault);
      foreach (int trialID in selectedTrials)
      {
        // Trial level
        DataTable aois = Document.ActiveDocument.DocDataSet.AOIsAdapter.GetDataByTrialID(trialID);
        foreach (DataRow row in aois.Rows)
        {
          string aoiName = row["ShapeName"].ToString();
          if (!aoiSingleCombo.Items.Contains(aoiName))
          {
            aoiSingleCombo.Items.Add(aoiName);
          }
        }
      }
    }

    /// <summary>
    /// Checks or unchecks all items in a given 2D <see cref="TreeView"/>.
    /// </summary>
    /// <param name="treeview">The <see cref="TreeView"/> which items should be modified.</param>
    /// <param name="select"><strong>True</strong>, if all <see cref="TreeView"/> items 
    /// should be checked, otherwise (if they should be unchecked) <strong>false</strong>.</param>
    private void CheckOrUncheckTreeviewItems(TreeView treeview, bool select)
    {
      foreach (TreeNode categoryNode in treeview.Nodes)
      {
        categoryNode.Checked = select;
        foreach (TreeNode stimulusNode in categoryNode.Nodes)
        {
          stimulusNode.Checked = select;
        }
      }
    }

    /// <summary>
    /// Initializes the trial treeviews with the trial list.
    /// </summary>
    private void InitTrialTreeViews()
    {
      DataTable table = Document.ActiveDocument.DocDataSet.TrialsAdapter.GetData();

      FillTreeView(this.trvTrialsAOI, table);
      FillTreeView(this.trvTrialsDefault, table);
    }

    /// <summary>
    /// This method starts the standard statistical parameters calculation,
    /// if the backgroundworker is not busy at the moment.
    /// </summary>
    private void StartStandardCalculation()
    {
      if (!this.bgwCalculateStandards.IsBusy)
      {
        // Clear Existing Rows
        this.dGVExportTable.Rows.Clear();

        // If applicable add 8 character row
        if (this.chb8CharacterRow.Checked)
        {
          this.AddShortNameRow();
        }

        // Disable checkboxes
        this.EnableStandardUI(false);

        // Start Calculation in background
        this.bgwCalculateStandards.RunWorkerAsync();

        this.btnFillWithData.Enabled = false;
      }
    }

    /// <summary>
    /// This method starts the transition parameters calculation,
    /// if the backgroundworker is not busy at the moment.
    /// </summary>
    private void StartTransitionsCalculation()
    {
      int selectedTrial = 0;
      if (!this.bgwCalculateTransitions.IsBusy)
      {
        // Clear Existing Rows and Columns
        this.dgvTransitions.Rows.Clear();
        this.dgvTransitions.Columns.Clear();
        this.dgvTransitions.Columns.Add("AOIGroup", "AOI Group");
        this.dgvTransitions.Columns.Add("nowhere", "nowhere");
        if (this.rdbTransitionUseAOIGroups.Checked)
        {
          foreach (string aoiGroup in this.aoiGroups)
          {
            this.dgvTransitions.Columns.Add(aoiGroup, aoiGroup);
          }
        }
        else if (this.rdbTransitionsUseTrial.Checked)
        {
          // Get selected trial
          if (this.trvTrialsAOI.SelectedNode == null || this.trvTrialsAOI.SelectedNode.Level == 0)
          {
            string message = "Please select a single trial from the treeview by highlighting it."
              + Environment.NewLine + "Please note that the checked state of the "
              + "Checkboxes is ignored in this mode.";
            ExceptionMethods.ProcessMessage("No trial selected", message);
            return;
          }

          string selectedTrialID = this.trvTrialsAOI.SelectedNode.Name;
          selectedTrial = Convert.ToInt32(selectedTrialID);
          DataTable aoiTable = Document.ActiveDocument.DocDataSet.AOIsAdapter.GetDataByTrialID(selectedTrial);
          foreach (DataRow aoiRow in aoiTable.Rows)
          {
            string aoiName = aoiRow["ShapeName"].ToString();
            this.dgvTransitions.Columns.Add(aoiName, aoiName);
          }
        }

        // Start Calculation in background
        // The parameter with the trial ID is only used in "rdbTransitionsUseTrial" mode.
        this.bgwCalculateTransitions.RunWorkerAsync(selectedTrial);

        this.btnTransitionsStartCalculation.Enabled = false;
      }
    }

    /// <summary>
    /// Iterates selected subjects and calculates the statistics variables 
    /// with checkbox state= selected.
    /// </summary>
    /// <param name="worker">The <see cref="BackgroundWorker"/> with the worker</param>
    /// <param name="e">A <see cref="DoWorkEventArgs"/> with the event data</param>
    private void FillWithData(BackgroundWorker worker, DoWorkEventArgs e)
    {
      try
      {
        int counterRows = 0;
        Statistic newStatistic = new Statistic(
          this.subjectParams,
          this.trialParams,
          this.gazeParams,
          this.gazeCustomParams,
          this.mouseParams,
          this.mouseCustomParams,
          this.tolerance);

        DataTable subjectsTable = Document.ActiveDocument.DocDataSet.SubjectsAdapter.GetData();
        DataView subjectView = new DataView(subjectsTable);
        subjectView.Sort = "SubjectName ASC";

        List<string> checkedSubjects = GetCheckedSubjects(this.trvSubjects);

        // Iterate selected subjects
        foreach (DataRowView subjectRow in subjectView)
        {
          string subjectName = subjectRow["SubjectName"].ToString();
          List<string> experimentList = new List<string>();

          counterRows = 0;
          if (checkedSubjects.Contains(subjectName))
          {
            // If trialID is not checked but other trial depending variables
            // Check it now
            if (this.trialParams != (this.trialParams | TrialParams.TrialID))
            {
              if (this.trialParams != TrialParams.None ||
                this.mouseParams != MouseParams.None ||
                this.gazeParams != GazeParams.None)
              {
                string message = "There are variables selected for calculation, " +
                  Environment.NewLine + "that need the trial identifying column TRIALID." +
                Environment.NewLine + "Please select this column in the Trials section.";
                ExceptionMethods.ProcessMessage("Please add TrialID", message);
                break;
              }
            }

            // If only exporting subject columns, ignore trials
            if (this.trialParams == TrialParams.None)
            {
              DataGridViewRow newRow = this.GetStandardsDataGridViewRow();
              newStatistic.FillSubjectColumns(newRow, subjectRow);
              continue;
            }

            List<int> trialIDs = GetSelectedTrials(this.trvTrialsDefault);

            DataTable trialsTable
              = Document.ActiveDocument.DocDataSet.TrialsAdapter.GetDataBySubject(subjectName);
            DataView trialsView = new DataView(trialsTable);
            trialsView.Sort = "TrialSequence ASC";

            // Iterate 
            foreach (DataRowView trialRow in trialsView)
            {
              int trialID = (int)trialRow["TrialID"];
              float duration = Convert.ToSingle(trialRow["Duration"]);

              // Skip trials that are not selected.
              if (!trialIDs.Contains(trialID))
              {
                continue;
              }

              // Get a datagridview via asynchronous call.
              DataGridViewRow newRow = this.GetStandardsDataGridViewRow();

              VGElementCollection targetAOIs = this.GetGroupAOIs(trialID, "Target");
              VGElementCollection searchRectAOIs = this.GetGroupAOIs(trialID, "SearchRect");

              if (this.subjectParams != SubjectParams.None)
              {
                newStatistic.FillSubjectColumns(newRow, subjectRow);
              }

              if (this.trialParams != TrialParams.None)
              {
                newStatistic.FillTrialColumns(newRow, trialRow, subjectName);
              }

              if (this.trialParams != TrialParams.None || this.mouseParams != MouseParams.None)
              {
                newStatistic.FillPolylineRelatedColumns(newRow, trialRow, subjectName);
              }

              if (this.mouseParams != MouseParams.None)
              {
                newStatistic.FillMouseColumns(newRow, trialRow, subjectName, targetAOIs, searchRectAOIs);
              }

              if (this.gazeParams != GazeParams.None)
              {
                newStatistic.FillGazeColumns(newRow, trialRow, subjectName, targetAOIs, searchRectAOIs);
              }

              if (worker.CancellationPending)
              {
                e.Cancel = true;
                break;
              }
              else
              {
                // Report progress as a percentage of the total task.
                int percentComplete = Convert.ToInt32(Convert.ToSingle(counterRows) / trialsTable.Rows.Count * 100);
                worker.ReportProgress(percentComplete, "Calculating Subject:" + subjectName);
              }

              // increase counter
              counterRows++;
            }
          }

          if (worker.CancellationPending)
          {
            e.Cancel = true;
            break;
          }
        }

        // Cancel the asynchronous operation.
        worker.CancelAsync();
      }
      catch (Exception ex)
      {
        ExceptionMethods.HandleException(ex);
      }
      finally
      {
        worker.CancelAsync();
      }
    }

    /// <summary>
    /// This method returns the ids of the selected trials of the trvTrialsDefault
    /// </summary>
    /// <param name="treeView">A <see cref="TreeView"/> that contains trials that
    /// are checked or not.</param>
    /// <returns>A List with the ids of the selected trials of the trvTrialsDefault.</returns>
    public static List<int> GetSelectedTrials(TreeView treeView)
    {
      // Get selected trials
      List<int> trialIDs = new List<int>();

      foreach (TreeNode categoryNode in treeView.Nodes)
      {
        foreach (TreeNode trialNode in categoryNode.Nodes)
        {
          if (trialNode.Checked)
          {
            trialIDs.Add(Convert.ToInt32(trialNode.Name));
          }
        }
      }

      return trialIDs;
    }

    /// <summary>
    /// This static method parses the aoi table filtered by the given trialID
    /// for AOIs within the given group and returns them in a <see cref="VGElementCollection"/>
    /// </summary>
    /// <param name="trialID">An <see cref="Int32"/> with the trial ID</param>
    /// <param name="groupName">A <see cref="string"/> with the group name.</param>
    /// <returns>A <see cref="VGElementCollection"/> with the AOIs of the given group.</returns>
    private VGElementCollection GetGroupAOIs(int trialID, string groupName)
    {
      VGElementCollection groupAOIs = new VGElementCollection();
      DataTable targetTable
        = Document.ActiveDocument.DocDataSet.AOIsAdapter.GetDataByTrialIDAndGroup(trialID, groupName);
      VGElementCollection targetAois = new VGElementCollection();
      foreach (DataRow row in targetTable.Rows)
      {
        string strPtList = row["ShapePts"].ToString();
        string aoiType = row["ShapeType"].ToString();
        string aoiName = row["ShapeName"].ToString();
        string shapeGroup = row["ShapeGroup"].ToString();

        VGElement aoi = Queries.GetVGElementFromDatabase(aoiType, aoiName, shapeGroup, strPtList);
        groupAOIs.Add(aoi);
      }

      return groupAOIs;
    }

    /// <summary>
    /// Iterates selected trials and calculates the transition table.
    /// </summary>
    /// <param name="worker">The <see cref="BackgroundWorker"/></param>
    /// <param name="e">A <see cref="DoWorkEventArgs"/> with the event data.</param>
    private void FillTransitionsWithData(BackgroundWorker worker, DoWorkEventArgs e)
    {
      DataTable aoiTable = Document.ActiveDocument.DocDataSet.AOIs;
      DataView trialsAOIs = new DataView(aoiTable);
      DataTable subjectsTable = Document.ActiveDocument.DocDataSet.SubjectsAdapter.GetData();
      VGElementCollection trialAOIs = new VGElementCollection();
      List<string> checkedSubjects = GetCheckedSubjects(this.trvTransitionsSubjects);

      if (this.rdbTransitionUseAOIGroups.Checked)
      {
        int aoiGroupCount = this.aoiGroups.Count;
        Array transitionMatrix = Array.CreateInstance(typeof(int), aoiGroupCount + 1, aoiGroupCount + 1);
        Dictionary<string, int> groupIndexAssignment = new Dictionary<string, int>();
        groupIndexAssignment.Add("nowhere", 0);
        for (int i = 0; i < aoiGroupCount; i++)
        {
          string aoiGroupEntry = this.aoiGroups[i];
          groupIndexAssignment.Add(aoiGroupEntry, i + 1);
        }

        // Get selected trials
        List<int> trialIDs = new List<int>();

        foreach (TreeNode categoryNode in this.trvTrialsAOI.Nodes)
        {
          foreach (TreeNode trialNode in categoryNode.Nodes)
          {
            if (trialNode.Checked)
            {
              trialIDs.Add(Convert.ToInt32(trialNode.Name));
            }
          }
        }

        // Iterate selected subjects
        foreach (DataRow subjectRow in subjectsTable.Rows)
        {
          string subjectName = subjectRow["SubjectName"].ToString();

          if (checkedSubjects.Contains(subjectName))
          {
            DataView fixations = null;
            if (btnEye.Checked)
            {
              fixations = new DataView(Document.ActiveDocument.DocDataSet.GazeFixationsAdapter.GetDataBySubject(subjectName));
            }
            else if (btnMouse.Checked)
            {
              fixations = new DataView(Document.ActiveDocument.DocDataSet.MouseFixationsAdapter.GetDataBySubject(subjectName));
            }

            string foregoingHittedAOIGroup = string.Empty;
            int foregoingTrialID = -1;

            foreach (DataRowView fixationRow in fixations)
            {
              int trialID = (int)fixationRow["TrialID"];
              if (!trialIDs.Contains(trialID))
              {
                continue;
              }

              if (trialID != foregoingTrialID)
              {
                trialsAOIs.RowFilter = "TrialID=" + trialID.ToString();
                foregoingTrialID = trialID;

                trialAOIs.Clear();
                foreach (DataRowView row in trialsAOIs)
                {
                  string strPtList = row["ShapePts"].ToString();
                  string aoiType = row["ShapeType"].ToString();
                  string aoiName = row["ShapeName"].ToString();
                  string shapeGroup = row["ShapeGroup"].ToString();
                  VGElement aoi = Queries.GetVGElementFromDatabase(aoiType, aoiName, shapeGroup, strPtList);
                  trialAOIs.Add(aoi);
                }
              }

              string hittedAOIName = string.Empty;
              string hittedAOIGroup = string.Empty;
              List<string[]> hittedAOIs = Statistics.Statistic.FixationHitsAOI(trialAOIs, fixationRow);
              if (hittedAOIs.Count > 0)
              {
                // Take only first hitted AOI
                hittedAOIName = hittedAOIs[0][0];
                hittedAOIGroup = hittedAOIs[0][1];
              }

              if (foregoingHittedAOIGroup != string.Empty)
              {
                int indexOfHittedGroup = groupIndexAssignment[hittedAOIGroup];
                int indexOfForegoingGroup = groupIndexAssignment[foregoingHittedAOIGroup];
                int oldEntry = (int)transitionMatrix.GetValue(indexOfForegoingGroup, indexOfHittedGroup);
                int newEntry = oldEntry + 1;
                transitionMatrix.SetValue(newEntry, indexOfForegoingGroup, indexOfHittedGroup);
              }

              foregoingHittedAOIGroup = hittedAOIGroup;
            }
          }
        }

        // Write transitionMatrix to dgv
        for (int i = transitionMatrix.GetLowerBound(0); i <= transitionMatrix.GetUpperBound(0); i++)
        {
          // Get a datagridview via asynchronous call.
          DataGridViewRow newRow = this.GetTransitionsDataGridViewRow();
          if (i > 0)
          {
            newRow.Cells[0].Value = this.aoiGroups[i - 1];
          }
          else
          {
            newRow.Cells[0].Value = "nowhere";
          }

          for (int j = transitionMatrix.GetLowerBound(1); j <= transitionMatrix.GetUpperBound(1); j++)
          {
            newRow.Cells[j + 1].Value = transitionMatrix.GetValue(i, j);
          }
        }
      }
      else if (this.rdbTransitionsUseTrial.Checked)
      {
        trialAOIs.Clear();
        trialsAOIs.RowFilter = "TrialID=" + e.Argument.ToString();
        foreach (DataRowView row in trialsAOIs)
        {
          string strPtList = row["ShapePts"].ToString();
          string aoiType = row["ShapeType"].ToString();
          string aoiName = row["ShapeName"].ToString();
          string shapeGroup = row["ShapeGroup"].ToString();

          VGElement aoi = Queries.GetVGElementFromDatabase(aoiType, aoiName, shapeGroup, strPtList);
          trialAOIs.Add(aoi);
        }

        DataView gazeFixations = new DataView(
          Document.ActiveDocument.DocDataSet.GazeFixationsAdapter.GetDataByTrialID((int)e.Argument));
        DataView mouseFixations = new DataView(
          Document.ActiveDocument.DocDataSet.MouseFixationsAdapter.GetDataByTrialID((int)e.Argument));

        string filterString = string.Empty;
        foreach (string subject in checkedSubjects)
        {
          filterString += "(SubjectName='" + subject + "') OR ";
        }

        filterString = filterString.Substring(0, filterString.Length - 4);

        gazeFixations.RowFilter = filterString;
        mouseFixations.RowFilter = filterString;

        Array transitionMatrix = null;
        if (btnEye.Checked)
        {
          transitionMatrix = Statistic.CreateTransitionMatrixForSingleAOIs(
            gazeFixations,
            trialAOIs);
        }
        else if (btnMouse.Checked)
        {
          transitionMatrix = Statistic.CreateTransitionMatrixForSingleAOIs(
            mouseFixations,
            trialAOIs);
        }

        // Write transitionMatrix to dgv
        for (int i = transitionMatrix.GetLowerBound(0); i <= transitionMatrix.GetUpperBound(0); i++)
        {
          // Get a datagridview via asynchronous call.
          DataGridViewRow newRow = this.GetTransitionsDataGridViewRow();
          if (i > 0)
          {
            newRow.Cells[0].Value = trialAOIs[i - 1].Name;
          }
          else
          {
            newRow.Cells[0].Value = "nowhere";
          }

          for (int j = transitionMatrix.GetLowerBound(1); j <= transitionMatrix.GetUpperBound(1); j++)
          {
            newRow.Cells[j + 1].Value = transitionMatrix.GetValue(i, j);
          }
        }
      }
    }

    /// <summary>
    /// This method initializes the default mouse variables for use in this interface.
    /// </summary>
    private void CreateMouseVariables()
    {
      MouseVariable varMouseFixations = new MouseVariable(
        MouseParams.Fixations,
        "MFIXCOUN",
        "Mouse: Fixations (count)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSEFixations,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixations));
      this.defaultVariables.Add("chbMSEFixations", varMouseFixations);

      MouseVariable varMouseFixationsPS = new MouseVariable(
        MouseParams.FixationsPS,
        "MFIXCOpS",
        "Mouse: Fixations (count/s)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSEFixationsPS,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixationsPS));
      this.defaultVariables.Add("chbMSEFixationsPS", varMouseFixationsPS);

      MouseVariable varMouseFixationsUntilFirstMouseClick = new MouseVariable(
        MouseParams.FixationsUntilFirstMouseClick,
        "MFIXCO1C",
        "Mouse: Fixations Until First Click (count)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSECountFix2FirstClick,
        this.toolTipStatistic.GetToolTip(this.chbMSECountFix2FirstClick));
      this.defaultVariables.Add("chbMSECountFix2FirstClick", varMouseFixationsUntilFirstMouseClick);

      MouseVariable varMouseFixationDurationMean = new MouseVariable(
        MouseParams.FixationDurationMean,
        "MFIXDURA",
        "Mouse: Fixation Duration Mean (ms)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSEFixDurationMean,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixDurationMean));
      this.defaultVariables.Add("chbMSEFixDurationMean", varMouseFixationDurationMean);

      MouseVariable varMouseFixationDurationMedian = new MouseVariable(
        MouseParams.FixationDurationMedian,
        "MFIXDUME",
        "Mouse: Fixation Duration Median (ms)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSEFixDurationMedian,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixDurationMedian));
      this.defaultVariables.Add("chbMSEFixDurationMedian", varMouseFixationDurationMedian);

      MouseVariable varMouseFixationSaccadeRatio = new MouseVariable(
        MouseParams.FixationSaccadeRatio,
        "MFIXDUpS",
        "Mouse: Fixation/Saccade ratio",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSEFixationSaccadesRatio,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixationSaccadesRatio));
      this.defaultVariables.Add("chbMSEFixationSaccadesRatio", varMouseFixationSaccadeRatio);

      MouseVariable varMouseAverageSaccadeLength = new MouseVariable(
        MouseParams.AverageSaccadeLength,
        "MFIXSALE",
        "Mouse: Average Saccade Length (px)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSESaccadeLength,
        this.toolTipStatistic.GetToolTip(this.chbMSESaccadeLength));
      this.defaultVariables.Add("chbMSESaccadeLength", varMouseAverageSaccadeLength);

      MouseVariable varMouseAverageSaccadeVelocity = new MouseVariable(
        MouseParams.AverageSaccadeVelocity,
        "MFIXSAVE",
        "Mouse: Average Saccade Velocity (px/s)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSESaccadeVelocity,
        this.toolTipStatistic.GetToolTip(this.chbMSESaccadeVelocity));
      this.defaultVariables.Add("chbMSESaccadeVelocity", varMouseAverageSaccadeVelocity);

      MouseVariable varMouseTimeToFirstFixInSearchRect = new MouseVariable(
        MouseParams.TimeToFirstFixInSearchRect,
        "MFIXRECT",
        "Mouse: Time To First Fixation in AOI 'SearchRect' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSETime2FirstFixInSearchRect,
        this.toolTipStatistic.GetToolTip(this.chbMSETime2FirstFixInSearchRect));
      this.defaultVariables.Add("chbMSETime2FirstFixInSearchRect", varMouseTimeToFirstFixInSearchRect);

      MouseVariable varMouseTimeToFirstFixAtTarget = new MouseVariable(
        MouseParams.TimeToFirstFixAtTarget,
        "MFIXTARG",
        "Mouse: Time To First Fixation in AOI 'Target' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSETime2FirstFixAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbMSETime2FirstFixAtTarget));
      this.defaultVariables.Add("chbMSETime2FirstFixAtTarget", varMouseTimeToFirstFixAtTarget);

      MouseVariable varMouseTimeToSecondFixAtTarget = new MouseVariable(
        MouseParams.TimeToSecondFixAtTarget,
        "MFIX2TAR",
        "Mouse: Time To Second Fixation in AOI 'Target' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSETime2SecondFixAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbMSETime2SecondFixAtTarget));
      this.defaultVariables.Add("chbMSETime2SecondFixAtTarget", varMouseTimeToSecondFixAtTarget);

      MouseVariable varMouseTimeAtTarget = new MouseVariable(
        MouseParams.TimeAtTarget,
        "MFIXTAFT",
        "Mouse: AOI 'Target' Fixation Time (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSEFixTimeAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbMSEFixTimeAtTarget));
      this.defaultVariables.Add("chbMSEFixTimeAtTarget", varMouseTimeAtTarget);

      MouseVariable varMousePathlength = new MouseVariable(
        MouseParams.Pathlength,
        "MSE_PATH",
        "Mouse: Pathlength (px)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSEPathlength,
        this.toolTipStatistic.GetToolTip(this.chbMSEPathlength));
      this.defaultVariables.Add("chbMSEPathlength", varMousePathlength);

      MouseVariable varMousePathlengthPS = new MouseVariable(
        MouseParams.PathlengthPS,
        "MSE_PApS",
        "Mouse: Path velocity (px/s)",
       Type.GetType("System.Single"),
       "N2",
       this.chbMSEPathlengthPS,
       this.toolTipStatistic.GetToolTip(this.chbMSEPathlengthPS));
      this.defaultVariables.Add("chbMSEPathlengthPS", varMousePathlengthPS);

      MouseVariable varMouseLeftClicksPS = new MouseVariable(
        MouseParams.LeftClicksPS,
        "MCLILCpS",
        "Mouse: Left Clicks (count/s)",
      Type.GetType("System.Single"),
      "N2",
      this.chbMSELeftClicksPS,
      this.toolTipStatistic.GetToolTip(this.chbMSELeftClicksPS));
      this.defaultVariables.Add("chbMSELeftClicksPS", varMouseLeftClicksPS);

      MouseVariable varMouseRightClicksPS = new MouseVariable(
        MouseParams.RightClicksPS,
        "MCLIRCpS",
        "Mouse: Right Clicks (count/s)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSERightClicksPS,
        this.toolTipStatistic.GetToolTip(this.chbMSERightClicksPS));
      this.defaultVariables.Add("chbMSERightClicksPS", varMouseRightClicksPS);

      MouseVariable varMouseLeftClicks = new MouseVariable(
        MouseParams.LeftClicks,
        "MCLILCOU",
        "Mouse: Left Clicks (count)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSELeftClicks,
        this.toolTipStatistic.GetToolTip(this.chbMSELeftClicks));
      this.defaultVariables.Add("chbMSELeftClicks", varMouseLeftClicks);

      MouseVariable varMouseRightClicks = new MouseVariable(
        MouseParams.RightClicks,
        "MCLIRCOU",
        "Mouse: Right Clicks (count)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSERightClicks,
        this.toolTipStatistic.GetToolTip(this.chbMSERightClicks));
      this.defaultVariables.Add("chbMSERightClicks", varMouseRightClicks);

      MouseVariable varMouseTimeToFirstClick = new MouseVariable(
        MouseParams.TimeToFirstClick,
        "MTIM1CLI",
        "Mouse: Time Until First Click (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbMSETime2FirstClick,
        this.toolTipStatistic.GetToolTip(this.chbMSETime2FirstClick));
      this.defaultVariables.Add("chbMSETime2FirstClick", varMouseTimeToFirstClick);

      MouseVariable varMouseAverageDistanceToGaze = new MouseVariable(
        MouseParams.AverageDistanceToGaze,
        "GMF_AVDI",
        "Gaze: Average Gaze Mouse Path Distance (px)",
        Type.GetType("System.Single"),
        "N2",
        this.chbMSEAverageDistance,
        this.toolTipStatistic.GetToolTip(this.chbMSEAverageDistance));
      this.defaultVariables.Add("chbMSEAverageDistance", varMouseAverageDistanceToGaze);
    }

    /// <summary>
    /// This method initializes the default gaze variables for use in this interface.
    /// </summary>
    private void CreateGazeVariables()
    {
      GazeVariable varGazeFixations = new GazeVariable(
        GazeParams.Fixations,
        "GFIXCOUN",
        "Gaze: Fixations (count)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbGAZFixations,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixations));
      this.defaultVariables.Add("chbGAZFixations", varGazeFixations);

      GazeVariable varGazeFixationsPS = new GazeVariable(
        GazeParams.FixationsPS,
        "GFIXCOpS",
        "Gaze: Fixations (count/s)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZFixationsPS,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixationsPS));
      this.defaultVariables.Add("chbGAZFixationsPS", varGazeFixationsPS);

      GazeVariable varGazeFixationDurationMean = new GazeVariable(
        GazeParams.FixationDurationMean,
        "GFIXDURA",
        "Gaze: Fixation Duration Mean (ms)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZFixDurationMean,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixDurationMean));
      this.defaultVariables.Add("chbGAZFixDurationMean", varGazeFixationDurationMean);

      GazeVariable varGazeFixationDurationMedian = new GazeVariable(
        GazeParams.FixationDurationMedian,
        "GFIXDUME",
        "Gaze: Fixation Duration Median (ms)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZFixDurationMedian,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixDurationMedian));
      this.defaultVariables.Add("chbGAZFixDurationMedian", varGazeFixationDurationMedian);

      GazeVariable varGazeFixationSaccadeRatio = new GazeVariable(
        GazeParams.FixationSaccadeRatio,
        "GFIXDUpS",
        "Gaze: Fixation/Saccade ratio",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZFixationSaccadesRatio,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixationSaccadesRatio));
      this.defaultVariables.Add("chbGAZFixationSaccadesRatio", varGazeFixationSaccadeRatio);

      GazeVariable varGazeAverageSaccadeLength = new GazeVariable(
        GazeParams.AverageSaccadeLength,
        "GFIXSALE",
        "Gaze: Average Saccade Length (px)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZSaccadeLength,
        this.toolTipStatistic.GetToolTip(this.chbGAZSaccadeLength));
      this.defaultVariables.Add("chbGAZSaccadeLength", varGazeAverageSaccadeLength);

      GazeVariable varGazeAverageSaccadeVelocity = new GazeVariable(
        GazeParams.AverageSaccadeVelocity,
        "GFIXSAVE",
        "Gaze: Average Saccade Velocity (px/s)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZSaccadeVelocity,
        this.toolTipStatistic.GetToolTip(this.chbGAZSaccadeVelocity));
      this.defaultVariables.Add("chbGAZSaccadeVelocity", varGazeAverageSaccadeVelocity);

      GazeVariable varGazeTimeToFirstFixInSearchRect = new GazeVariable(
        GazeParams.TimeToFirstFixInSearchRect,
        "GFIXRECT",
        "Gaze: Time To First Fixation in AOI 'SearchRect' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbGAZTime2FirstFixInSearchRect,
        this.toolTipStatistic.GetToolTip(this.chbGAZTime2FirstFixInSearchRect));
      this.defaultVariables.Add("chbGAZTime2FirstFixInSearchRect", varGazeTimeToFirstFixInSearchRect);

      GazeVariable varGazeTimeToFirstFixAtTarget = new GazeVariable(
        GazeParams.TimeToFirstFixAtTarget,
        "GFIXTARG",
        "Gaze: Time To First Fixation in AOI 'Target' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbGAZTime2FirstFixAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbGAZTime2FirstFixAtTarget));
      this.defaultVariables.Add("chbGAZTime2FirstFixAtTarget", varGazeTimeToFirstFixAtTarget);

      GazeVariable varGazeTimeToSecondFixAtTarget = new GazeVariable(
        GazeParams.TimeToSecondFixAtTarget,
        "GFIX2TAR",
        "Gaze: Time To Second Fixation in AOI 'Target' (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbGAZTime2SecondFixAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbGAZTime2SecondFixAtTarget));
      this.defaultVariables.Add("chbGAZTime2SecondFixAtTarget", varGazeTimeToSecondFixAtTarget);

      GazeVariable varGazeTimeAtTarget = new GazeVariable(
        GazeParams.TimeAtTarget,
        "GFIXTAFT",
        "Gaze: AOI 'Target' Fixation Time (ms)",
        Type.GetType("System.Int32"),
        "N0",
       this.chbGAZFixTimeAtTarget,
        this.toolTipStatistic.GetToolTip(this.chbGAZFixTimeAtTarget));
      this.defaultVariables.Add("chbGAZFixTimeAtTarget", varGazeTimeAtTarget);

      GazeVariable varGazePathlength = new GazeVariable(
        GazeParams.Pathlength,
        "GFIXPATH",
        "Gaze: Fixation Connections Length (px)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbGAZSaccadeLength,
        this.toolTipStatistic.GetToolTip(this.chbGAZSaccadeLength));
      this.defaultVariables.Add("chbGAZPathlength", varGazePathlength);

      GazeVariable varGazePathlengthPS = new GazeVariable(
        GazeParams.PathlengthPS,
        "GFIXPApS",
        "Gaze: Path velocity (px/s)",
       Type.GetType("System.Single"),
       "N2",
       this.chbGAZSaccadeVelocity,
       this.toolTipStatistic.GetToolTip(this.chbGAZSaccadeVelocity));
      this.defaultVariables.Add("chbGAZPathlengthPS", varGazePathlengthPS);

      GazeVariable varGazeFixationsUntilFirstMouseClick = new GazeVariable(
        GazeParams.FixationsUntilFirstMouseClick,
        "GFIXCO1C",
        "Gaze: Fixations Until First Click (count)",
        Type.GetType("System.Single"),
        "N2",
        this.chbGAZCountFix2FirstClick,
        this.toolTipStatistic.GetToolTip(this.chbGAZCountFix2FirstClick));
      this.defaultVariables.Add("chbGAZCountFix2FirstClick", varGazeFixationsUntilFirstMouseClick);
    }

    /// <summary>
    /// This method initializes the default trial variables for use in this interface.
    /// </summary>
    private void CreateTrialVariables()
    {
      TrialVariable varTrialID = new TrialVariable(
        TrialParams.TrialID,
        "TRI_ID",
        "Trial: ID",
        Type.GetType("System.Int32"),
        "N0",
        this.chbTRITrialID,
        this.toolTipStatistic.GetToolTip(this.chbTRITrialID));
      this.defaultVariables.Add("chbTRITrialID", varTrialID);

      TrialVariable varTrialName = new TrialVariable(
        TrialParams.Name,
        "TRI_NAME",
        "Trial: Name",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRIName,
        this.toolTipStatistic.GetToolTip(this.chbTRIName));
      this.defaultVariables.Add("chbTRIName", varTrialName);

      TrialVariable varTrialSequence = new TrialVariable(
        TrialParams.Sequence,
        "TRI_SEQU",
        "Trial: Sequence",
        Type.GetType("System.Int32"),
        "N0",
       this.chbTRISequence,
        this.toolTipStatistic.GetToolTip(this.chbTRISequence));
      this.defaultVariables.Add("chbTRISequence", varTrialSequence);

      TrialVariable varTrialDuration = new TrialVariable(
        TrialParams.Duration,
        "TRI_DURA",
        "Trial: Duration (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbTRIDuration,
        this.toolTipStatistic.GetToolTip(this.chbTRIDuration));
      this.defaultVariables.Add("chbTRIDuration", varTrialDuration);

      TrialVariable varTrialStarttime = new TrialVariable(
        TrialParams.Starttime,
        "TRI_TIME",
        "Trial: Starting Time (ms)",
        Type.GetType("System.Int32"),
        "N0",
        this.chbTRIStarttime,
        this.toolTipStatistic.GetToolTip(this.chbTRIStarttime));
      this.defaultVariables.Add("chbTRIStarttime", varTrialStarttime);

      TrialVariable varTrialCategory = new TrialVariable(
        TrialParams.Category,
        "TRI_CATE",
        "Trial: Category",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRICategory,
        this.toolTipStatistic.GetToolTip(this.chbTRICategory));
      this.defaultVariables.Add("chbTRICategory", varTrialCategory);

      TrialVariable varTrialTargetsize = new TrialVariable(
        TrialParams.Targetsize,
        "TRI_TASI",
        "Trial: Target AOI Size (% of screen size)",
        Type.GetType("System.Single"),
        "N1",
       this.chbTRITargetsize,
        this.toolTipStatistic.GetToolTip(this.chbTRITargetsize));
      this.defaultVariables.Add("chbTRITargetsize", varTrialTargetsize);

      TrialVariable varTrialAOISize = new TrialVariable(
        TrialParams.AOISize,
        "TRI_AOIS",
        "Trial: AOI Size (% of screen size)",
        Type.GetType("System.Single"),
        "N1",
       this.chbTRIAOISize,
        this.toolTipStatistic.GetToolTip(this.chbTRIAOISize));
      this.defaultVariables.Add("chbTRIAOISize", varTrialAOISize);

      TrialVariable varTrialResponsesAOI = new TrialVariable(
        TrialParams.ResponseAOI,
        "TRI_RAOI",
        "Trial: Responses AOI",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRIAOIofResponse,
        this.toolTipStatistic.GetToolTip(this.chbTRIAOIofResponse));
      this.defaultVariables.Add("chbTRIAOIofResponse", varTrialResponsesAOI);

      TrialVariable varTrialResponse = new TrialVariable(
        TrialParams.Response,
        "TRI_RESP",
        "Trial: Response",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRIResponse,
        this.toolTipStatistic.GetToolTip(this.chbTRIResponse));
      this.defaultVariables.Add("chbTRIResponse", varTrialResponse);

      TrialVariable varTrialResponseCorrectness = new TrialVariable(
        TrialParams.ResponseCorrectness,
        "TRI_SOLU",
        "Trial: Response Correctness",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRIResponseCorrectness,
        this.toolTipStatistic.GetToolTip(this.chbTRIResponseCorrectness));
      this.defaultVariables.Add("chbTRIResponseCorrectness", varTrialResponseCorrectness);

      TrialVariable varTrialDataLoss = new TrialVariable(
        TrialParams.Dataloss,
        "TRI_LOSS",
        "Trial: Data Loss (count)",
        Type.GetType("System.Int32"),
        "N0",
       this.chbTRIDataLoss,
        this.toolTipStatistic.GetToolTip(this.chbTRIDataLoss));
      this.defaultVariables.Add("chbTRIDataLoss", varTrialDataLoss);

      TrialVariable varTrialDataLossPC = new TrialVariable(
        TrialParams.DatalossPC,
        "TRI_LOpc",
        "Trial: Data Loss (%)",
        Type.GetType("System.Single"),
        "N1",
       this.chbTRIDataLossPC,
        this.toolTipStatistic.GetToolTip(this.chbTRIDataLossPC));
      this.defaultVariables.Add("chbTRIDataLossPC", varTrialDataLossPC);

      TrialVariable varTrialSamplesOutofMonitorPC = new TrialVariable(
        TrialParams.OutOfMonitorPC,
        "TRI_LMpc",
        "Trial: Samples Out of Monitor (%)",
        Type.GetType("System.Single"),
        "N1",
       this.chbTRISamplesOutOfMonitorPC,
        this.toolTipStatistic.GetToolTip(this.chbTRISamplesOutOfMonitorPC));
      this.defaultVariables.Add("chbTRISamplesOutOfMonitorPC", varTrialSamplesOutofMonitorPC);

      TrialVariable varTrialSamplesOutofMonitor = new TrialVariable(
        TrialParams.OutOfMonitor,
        "TRI_LOMO",
        "Trial: Samples Out of Monitor (count)",
        Type.GetType("System.Single"),
        "N0",
       this.chbTRISamplesOutOfMonitor,
        this.toolTipStatistic.GetToolTip(this.chbTRISamplesOutOfMonitor));
      this.defaultVariables.Add("chbTRISamplesOutOfMonitor", varTrialSamplesOutofMonitor);

      TrialVariable varTrialEliminate = new TrialVariable(
        TrialParams.Elimination,
        "TRI_ELIM",
        "Trial: To Eliminate",
        Type.GetType("System.String"),
        string.Empty,
       this.chbTRIEliminate,
        this.toolTipStatistic.GetToolTip(this.chbTRIEliminate));
      this.defaultVariables.Add("chbTRIEliminate", varTrialEliminate);
    }

    /// <summary>
    /// This method initializes the default subject variables for use in this interface.
    /// </summary>
    private void CreateSubjectVariables()
    {
      SubjectVariable varSubjectName = new SubjectVariable(
        SubjectParams.SubjectName,
        "SUB_NAME",
        "Subject: Name",
        Type.GetType("System.String"),
        string.Empty,
       this.chbSUBID,
        this.toolTipStatistic.GetToolTip(this.chbSUBID));
      this.defaultVariables.Add("chbSUBID", varSubjectName);

      SubjectVariable varSubjectCategory = new SubjectVariable(
        SubjectParams.Category,
        "SUB_CATE",
        "Subject: Category",
        Type.GetType("System.String"),
        string.Empty,
       this.chbSUBCategory,
        this.toolTipStatistic.GetToolTip(this.chbSUBCategory));
      this.defaultVariables.Add("chbSUBCategory", varSubjectCategory);

      SubjectVariable varSubjectAge = new SubjectVariable(
        SubjectParams.Age,
        "SUB_AGE",
        "Subject: Age",
        Type.GetType("System.Int32"),
        "N0",
       this.chbSUBAge,
        this.toolTipStatistic.GetToolTip(this.chbSUBAge));
      this.defaultVariables.Add("chbSUBAge", varSubjectAge);

      SubjectVariable varSubjectHandedness = new SubjectVariable(
        SubjectParams.Handedness,
        "SUB_HAND",
        "Subject: Handedness",
        Type.GetType("System.String"),
        string.Empty,
       this.chbSUBHandedness,
        this.toolTipStatistic.GetToolTip(this.chbSUBHandedness));
      this.defaultVariables.Add("chbSUBHandedness", varSubjectHandedness);

      SubjectVariable varSubjectSex = new SubjectVariable(
        SubjectParams.Sex,
        "SUB_SEX",
        "Subject: Sex",
        Type.GetType("System.String"),
        string.Empty,
       this.chbSUBSex,
        this.toolTipStatistic.GetToolTip(this.chbSUBSex));
      this.defaultVariables.Add("chbSUBSex", varSubjectSex);

      SubjectVariable varSubjectComments = new SubjectVariable(
        SubjectParams.Comments,
        "SUB_COMM",
        "Subject: Comments",
        Type.GetType("System.String"),
        string.Empty,
       this.chbSUBComments,
        this.toolTipStatistic.GetToolTip(this.chbSUBComments));
      this.defaultVariables.Add("chbSUBComments", varSubjectComments);

      DataTable customSubjectParams = Document.ActiveDocument.DocDataSet.ParamsAdapter.GetData();

      int customVarCounter = 0;
      foreach (DataRow paramRow in customSubjectParams.Rows)
      {
        string param = paramRow["Param"].ToString();
        string description = paramRow["Description"].ToString();

        SubjectVariable varSubjectCustom = new SubjectVariable(
         SubjectParams.Custom,
         "SUB_C" + customVarCounter.ToString(),
         "Subject: " + param,
         Type.GetType("System.String"),
         string.Empty,
         null,
         description);
        this.defaultVariables.Add("SUB_C" + customVarCounter.ToString(), varSubjectCustom);
        customVarCounter++;
      }

      customSubjectParams.Dispose();
    }

    /// <summary>
    /// This method creates a custom mouse variable from the current user interface settings.
    /// </summary>
    /// <param name="isAOIGroup">True, if it is a AOI Group that the parameter belongs to,
    /// otherwise (for a single AOI) false.</param>
    private void CreateCustomMouseParam(bool isAOIGroup)
    {
      this.mouseParams |= MouseParams.Custom;
      CustomVariable newMouseVariable = new CustomVariable();
      newMouseVariable.AOIName = isAOIGroup ? this.cbbMouseAOIGroup.Text : this.cbbMouseAOISingle.Text;
      newMouseVariable.ColumnName = "MFIX_C" + this.mouseCustomParams.Count.ToString();
      newMouseVariable.Number = (int)this.nudMouseNumberOf.Value;
      newMouseVariable.IsAOIGroup = isAOIGroup;
      newMouseVariable.MouseButton = this.cbbMouseClickButton.Text == string.Empty ? MouseButtons.None : (MouseButtons)Enum.Parse(typeof(MouseButtons), this.cbbMouseClickButton.Text);
      if (this.rdbMouseCompleteFixationTime.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.CompleteTime;
      }
      else if (this.rdbMouseTimeUntil.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.TimeUntil;
      }
      else if (this.rdbMouseNumberOfFixations.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.NumberOf;
      }
      else if (this.rdbMouseFixationDurationMean.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.FixationDurationMean;
      }
      else if (this.rdbMouseFixationDurationMedian.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.FixationDurationMedian;
      }
      else if (this.rdbMouseClickAOI.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.Clicks;
      }
      else if (this.rdbMouseSaccadeDuration.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.SaccadeDuration;
      }
      else if (this.rdbMouseSaccadeLength.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.SaccadeLength;
      }
      else if (this.rdbMouseSaccadeVelocity.Checked)
      {
        newMouseVariable.ParamType = ParamTypes.SaccadeVelocity;
      }

      MouseVariable var = new MouseVariable(
        MouseParams.Custom,
        newMouseVariable.ColumnName,
        "Mouse: " + newMouseVariable.ToString(),
        Type.GetType("System.Int32"),
        "N0",
        null,
        newMouseVariable.ReturnValues());

      this.InsertOrRemoveColumn(true, var);
      this.mouseCustomParams.Add(newMouseVariable);
    }

    /// <summary>
    /// This method creates a custom gaze variable from the current user interface settings.
    /// </summary>
    /// <param name="isAOIGroup">True, if it is a AOI Group that the parameter belongs to,
    /// otherwise (for a single AOI) false.</param>
    private void CreateCustomGazeParam(bool isAOIGroup)
    {
      this.gazeParams |= GazeParams.Custom;
      CustomVariable newGazeVariable = new CustomVariable();
      newGazeVariable.AOIName = isAOIGroup ? this.cbbGazeAOIGroups.Text : this.cbbGazeAOISingle.Text;
      newGazeVariable.ColumnName = "GFIX_C" + this.gazeCustomParams.Count.ToString();
      newGazeVariable.Number = (int)this.nudGazeTimeUntilNumberOf.Value;
      newGazeVariable.IsAOIGroup = isAOIGroup;
      if (this.rdbGazeCompleteFixationTime.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.CompleteTime;
      }
      else if (this.rdbGazeTimeUntil.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.TimeUntil;
      }
      else if (this.rdbGazeNumberOfFixations.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.NumberOf;
      }
      else if (this.rdbGazeFixationDurationMean.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.FixationDurationMean;
      }
      else if (this.rdbGazeFixationDurationMedian.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.FixationDurationMedian;
      }
      else if (this.rdbGazeSaccadeDuration.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.SaccadeDuration;
      }
      else if (this.rdbGazeSaccadeLength.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.SaccadeLength;
      }
      else if (this.rdbGazeSaccadeVelocity.Checked)
      {
        newGazeVariable.ParamType = ParamTypes.SaccadeVelocity;
      }

      GazeVariable var = new GazeVariable(
        GazeParams.Custom,
        newGazeVariable.ColumnName,
       "Gaze: " + newGazeVariable.ToString(),
       Type.GetType("System.Int32"),
       "N0",
       null,
       newGazeVariable.ReturnValues());

      this.InsertOrRemoveColumn(true, var);
      this.gazeCustomParams.Add(newGazeVariable);
    }

    /// <summary>
    /// This method creates a custom gaze variable 
    /// for regressions from the current user interface settings.
    /// </summary>
    /// <param name="isUsingAOI">True, if regressions should only be detected in an AOI
    /// otherwise (for using all fixation data) false.</param>
    /// <param name="isAOIGroup">True, if it is a AOI Group that the parameter belongs to,
    /// otherwise (for a single AOI) false.</param>
    private void CreateCustomGazeRegressionParam(bool isUsingAOI, bool isAOIGroup)
    {
      this.gazeParams |= GazeParams.Custom;
      CustomVariable newGazeVariable = new CustomVariable();
      if (isUsingAOI)
      {
        newGazeVariable.AOIName = isAOIGroup ? this.cbbGazeRegressionAOIGroups.Text : this.cbbGazeRegressionAOISingle.Text;
      }
      else
      {
        newGazeVariable.AOIName = string.Empty;
      }

      newGazeVariable.Number = (int)this.nudGazeRegressionLineHeight.Value;
      newGazeVariable.ColumnName = "GFIX_C" + this.gazeCustomParams.Count.ToString();
      newGazeVariable.IsAOIGroup = isAOIGroup;
      newGazeVariable.ParamType = ParamTypes.Regressions;

      GazeVariable var = new GazeVariable(
        GazeParams.Custom,
        newGazeVariable.ColumnName,
       "Gaze: " + newGazeVariable.ToString(),
       Type.GetType("System.Int32"),
       "N0",
       null,
       newGazeVariable.ReturnValues());

      this.InsertOrRemoveColumn(true, var);
      this.gazeCustomParams.Add(newGazeVariable);
    }

    #endregion //METHODS

    ///////////////////////////////////////////////////////////////////////////////
    // Small helping Methods                                                     //
    ///////////////////////////////////////////////////////////////////////////////
    #region HELPER

    /// <summary>
    /// This method invokes the method to retrieve a
    /// new row for the datagrid view from the
    /// calculation thread.
    /// </summary>
    /// <returns>A new <see cref="DataGridViewRow"/>
    /// of the <see cref="dGVExportTable"/></returns>
    private DataGridViewRow GetStandardsDataGridViewRow()
    {
      // Initiate the asychronous call to get DataGridView
      IAsyncResult result = BeginInvoke(new AsyncAddStandardsRowMethodCaller(this.AddStandardsRow));

      // Call EndInvoke to wait for the asynchronous call to complete,
      // and to retrieve the new DataGridViewRow.
      return (DataGridViewRow)EndInvoke(result);
    }

    /// <summary>
    /// This method invokes the method to retrieve a
    /// new row for the datagrid view from the
    /// calculation thread.
    /// </summary>
    /// <returns>A new <see cref="DataGridViewRow"/>
    /// of the <see cref="dgvTransitions"/></returns>
    private DataGridViewRow GetTransitionsDataGridViewRow()
    {
      // Initiate the asychronous call to get DataGridView
      IAsyncResult result = BeginInvoke(new AsyncAddStandardsRowMethodCaller(this.AddTransitionsRow));

      // Call EndInvoke to wait for the asynchronous call to complete,
      // and to retrieve the new DataGridViewRow.
      return (DataGridViewRow)EndInvoke(result);
    }

    /// <summary>
    /// Returns statistics standard data grid view row for backgroundworker
    /// </summary>
    /// <returns>A new  <see cref="DataGridViewRow"/> from <see cref="dGVExportTable"/></returns>
    private DataGridViewRow AddStandardsRow()
    {
      int rowindex = this.dGVExportTable.Rows.Add();
      DataGridViewRow newRow = this.dGVExportTable.Rows[rowindex];
      return newRow;
    }

    /// <summary>
    /// Returns statistics data grid view row for backgroundworker
    /// </summary>
    /// <returns>A new  <see cref="DataGridViewRow"/> from <see cref="dgvTransitions"/>.</returns>
    private DataGridViewRow AddTransitionsRow()
    {
      int rowindex = this.dgvTransitions.Rows.Add();
      DataGridViewRow newRow = this.dgvTransitions.Rows[rowindex];
      return newRow;
    }

    /// <summary>
    /// Fills the list of trials from the given Data Table into
    /// an sorted treeview that is specified in the first parameter.
    /// </summary>
    /// <param name="treeview">A <see cref="TreeView"/> control
    /// that should be filled.</param>
    /// <param name="table">A <see cref="DataTable"/> with the trial Data</param>
    public static void FillTreeView(TreeView treeview, DataTable table)
    {
      treeview.BeginUpdate();
      treeview.Nodes.Clear();

      foreach (DataRow trialRow in table.Rows)
      {
        string category = trialRow["Category"].ToString();
        string trialName = trialRow["TrialName"].ToString();
        string trialID = trialRow["TrialID"].ToString();
        if (category == string.Empty || category == " ")
        {
          category = "no category";
        }

        if (!treeview.Nodes.ContainsKey(category))
        {
          treeview.Nodes.Add(category, category, string.Empty, string.Empty);
          treeview.Nodes[category].Checked = true;
        }

        if (!treeview.Nodes[category].Nodes.ContainsKey(trialID))
        {
          treeview.Nodes[category].Nodes.Add(trialID, trialName, string.Empty, string.Empty);
          treeview.Nodes[category].Nodes[trialID].Checked = true;
        }
      }

      treeview.Sort();
      treeview.EndUpdate();
    }

    /// <summary>
    /// This method extracts the AOI groups from the AOI data table.
    /// </summary>
    private void GenerateAOIGroups()
    {
      this.aoiGroups = new List<string>();

      // Get a list of AOI groups
      DataTable targetTable = Document.ActiveDocument.DocDataSet.ShapeGroupsAdapter.GetData();
      foreach (DataRow groupRow in targetTable.Rows)
      {
        if (groupRow["ShapeGroup"] != null)
        {
          string groupValue = groupRow["ShapeGroup"].ToString();
          if (groupValue != string.Empty && groupValue != " ")
          {
            this.aoiGroups.Add(groupValue);
          }
        }
      }
    }

    /// <summary>
    /// Adds a row with the column names (which are 8 character long) as first row.
    /// </summary>
    private void AddShortNameRow()
    {
      List<string> columnNames = new List<string>();
      foreach (DataGridViewColumn column in this.dGVExportTable.Columns)
      {
        columnNames.Add(column.Name);
      }

      this.dGVExportTable.Rows.Add(columnNames.ToArray());
    }

    /// <summary>
    /// Update datagrid view with new column or remove column if checkbox is deselected.
    /// </summary>
    /// <param name="doInsert">Flag. <strong>True</strong> if column should be inserted,
    /// otherwise <strong>false</strong>.</param>
    /// <param name="var">Parameter description.</param>
    private void InsertOrRemoveColumn(bool doInsert, DefaultVariable var)
    {
      if (doInsert)
      {
        // Create cell style
        DataGridViewCellStyle style = new DataGridViewCellStyle();
        style.Format = var.ColumnFormat;
        style.NullValue = null;
        style.BackColor = Color.Wheat;
        style.Alignment = DataGridViewContentAlignment.MiddleRight;

        // create text box column with above defined cell style and 
        // given properties.
        DataGridViewTextBoxColumn newColumn = new DataGridViewTextBoxColumn();
        newColumn.ValueType = var.ColumnType;
        newColumn.Name = var.ColumnName;
        newColumn.HeaderText = var.ColumnDescription;
        newColumn.ReadOnly = true;
        newColumn.DefaultCellStyle = style;
        newColumn.ToolTipText = var.ReturnValues;

        // Add column to data grid view.
        this.dGVExportTable.Columns.Add(newColumn);
      }
      else
      {
        if (this.dGVExportTable.Columns[var.ColumnName] != null)
        {
          this.dGVExportTable.Columns.Remove(var.ColumnName);
        }
      }
    }

    /// <summary>
    /// Updates the AOI Group combo boxes with the current entries.
    /// </summary>
    private void PopulateAOIGroupCombo()
    {
      this.GenerateAOIGroups();
      this.cbbGazeAOIGroups.Items.Clear();
      this.cbbGazeRegressionAOIGroups.Items.Clear();
      this.cbbMouseAOIGroup.Items.Clear();
      this.cbbGazeAOIGroups.Items.AddRange(this.aoiGroups.ToArray());
      this.cbbGazeRegressionAOIGroups.Items.AddRange(this.aoiGroups.ToArray());
      this.cbbMouseAOIGroup.Items.AddRange(this.aoiGroups.ToArray());
    }

    /// <summary>
    /// User clicked select all button so check or uncheck all checkboxes.
    /// </summary>
    /// <param name="enable"><strong>True</strong> if ui should be enabled,
    /// otherwise <strong>false</strong>.</param>
    private void EnableStandardUI(bool enable)
    {
      // Subject checkboxes
      this.chbSUBCategory.Enabled = enable;
      this.chbSUBAge.Enabled = enable;
      this.chbSUBSex.Enabled = enable;
      this.chbSUBHandedness.Enabled = enable;

      this.chbSUBComments.Enabled = enable;

      // Trial checkboxes
      this.chbTRITrialID.Enabled = enable;
      this.chbTRIName.Enabled = enable;
      this.chbTRISequence.Enabled = enable;
      this.chbTRICategory.Enabled = enable;
      this.chbTRIDuration.Enabled = enable;
      this.chbTRIStarttime.Enabled = enable;

      this.chbTRITargetsize.Enabled = enable;
      this.chbTRIAOISize.Enabled = enable;

      this.chbTRIDataLoss.Enabled = enable;
      this.chbTRIDataLossPC.Enabled = enable;
      this.chbTRISamplesOutOfMonitor.Enabled = enable;
      this.chbTRISamplesOutOfMonitorPC.Enabled = enable;

      this.chbTRIResponse.Enabled = enable;
      this.chbTRIResponseCorrectness.Enabled = enable;
      this.chbTRIAOIofResponse.Enabled = enable;
      this.chbTRIEliminate.Enabled = enable;

      // Gaze checkboxes
      this.chbGAZFixations.Enabled = enable;
      this.chbGAZFixationsPS.Enabled = enable;
      this.chbGAZCountFix2FirstClick.Enabled = enable;
      this.chbGAZFixDurationMean.Enabled = enable;
      this.chbGAZFixDurationMedian.Enabled = enable;
      this.chbGAZFixationSaccadesRatio.Enabled = enable;

      this.chbGAZSaccadeLength.Enabled = enable;
      this.chbGAZSaccadeVelocity.Enabled = enable;

      this.chbGAZTime2FirstFixInSearchRect.Enabled = enable;
      this.chbGAZTime2FirstFixAtTarget.Enabled = enable;
      this.chbGAZTime2SecondFixAtTarget.Enabled = enable;
      this.chbGAZFixTimeAtTarget.Enabled = enable;

      this.chbGAZPathlength.Enabled = enable;
      this.chbGAZPathlengthPS.Enabled = enable;

      // Mouse checkboxes
      this.chbMSEFixations.Enabled = enable;
      this.chbMSEFixationsPS.Enabled = enable;
      this.chbMSECountFix2FirstClick.Enabled = enable;
      this.chbMSEFixDurationMean.Enabled = enable;
      this.chbMSEFixDurationMedian.Enabled = enable;
      this.chbMSEFixationSaccadesRatio.Enabled = enable;
      this.chbMSESaccadeLength.Enabled = enable;
      this.chbMSESaccadeVelocity.Enabled = enable;

      this.chbMSELeftClicks.Enabled = enable;
      this.chbMSELeftClicksPS.Enabled = enable;
      this.chbMSERightClicks.Enabled = enable;
      this.chbMSERightClicksPS.Enabled = enable;

      this.chbMSETime2FirstFixInSearchRect.Enabled = enable;
      this.chbMSETime2FirstFixAtTarget.Enabled = enable;
      this.chbMSETime2SecondFixAtTarget.Enabled = enable;
      this.chbMSEFixTimeAtTarget.Enabled = enable;
      this.chbMSETime2FirstClick.Enabled = enable;

      this.chbMSEPathlength.Enabled = enable;
      this.chbMSEPathlengthPS.Enabled = enable;
      this.chbMSEAverageDistance.Enabled = enable;

      this.trvSubjects.Enabled = enable;
      this.clbSUBCustomparameters.Enabled = enable;
      this.trvTrialsDefault.Enabled = enable;
      this.btnGazeAddCustomVariable.Enabled = enable;
      this.btnMouseAddCustomVariable.Enabled = enable;
    }

    #endregion //HELPER
  }
}