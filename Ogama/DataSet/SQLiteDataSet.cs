//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Ogama.DataSet.SQLiteOgamaDataSetTableAdapters
{
  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>
  public partial class SQLiteTadSubjectParameters : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadSubjectParameters()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "SubjectParameters";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("Param", "Param");
      tableMapping.ColumnMappings.Add("ParamValue", "ParamValue");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = "DELETE FROM [SubjectParameters] WHERE (([ID] = @Original_ID) AND ([SubjectName] =" +
          " @Original_SubjectName) AND ([Param] = @Original_Param) AND ((@IsNull_ParamValue" +
          " = 1 AND [ParamValue] IS NULL) OR ([ParamValue] = @Original_ParamValue)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ParamValue", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ParamValue", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = "INSERT INTO [SubjectParameters] ([SubjectName], [Param], [ParamValue]) VALUES (@S" +
          "ubjectName, @Param, @ParamValue);\r\nSELECT ID, SubjectName, Param, ParamValue FRO" +
          "M SubjectParameters WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ParamValue", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [SubjectParameters] SET [SubjectName] = @SubjectName, [Param] = @Param, [ParamValue] = @ParamValue WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([Param] = @Original_Param) AND ((@IsNull_ParamValue = 1 AND [ParamValue] IS NULL) OR ([ParamValue] = @Original_ParamValue)));
SELECT ID, SubjectName, Param, ParamValue FROM SubjectParameters WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ParamValue", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ParamValue", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ParamValue", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParamValue", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[3];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, SubjectName, Param, ParamValue\r\nFROM         SubjectParameters";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM [SubjectParameters] WHERE ([SubjectName] = @Original_SubjectName)";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "SELECT     ID, SubjectName, Param, ParamValue\r\nFROM         SubjectParameters\r\nWH" +
          "ERE     (SubjectName = @Param1)";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.SubjectParametersDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.SubjectParametersDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.SubjectParametersDataTable dataTable = new SQLiteOgamaDataSet.SubjectParametersDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.SubjectParametersDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[2];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.SubjectParametersDataTable dataTable = new SQLiteOgamaDataSet.SubjectParametersDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.SubjectParametersDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "SubjectParameters");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(int Original_ID, string Original_SubjectName, string Original_Param, string Original_ParamValue)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      if ((Original_Param == null))
      {
        throw new global::System.ArgumentNullException("Original_Param");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Param));
      }
      if ((Original_ParamValue == null))
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ParamValue));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, string Param, string ParamValue)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      if ((Param == null))
      {
        throw new global::System.ArgumentNullException("Param");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Param));
      }
      if ((ParamValue == null))
      {
        this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ParamValue));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string SubjectName, string Param, string ParamValue, int Original_ID, string Original_SubjectName, string Original_Param, string Original_ParamValue, int ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      if ((Param == null))
      {
        throw new global::System.ArgumentNullException("Param");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Param));
      }
      if ((ParamValue == null))
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ParamValue));
      }
      this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_SubjectName));
      }
      if ((Original_Param == null))
      {
        throw new global::System.ArgumentNullException("Original_Param");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Param));
      }
      if ((Original_ParamValue == null))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_ParamValue));
      }
      this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string SubjectName, string Param, string ParamValue, int Original_ID, string Original_SubjectName, string Original_Param, string Original_ParamValue)
    {
      return this.Update(SubjectName, Param, ParamValue, Original_ID, Original_SubjectName, Original_Param, Original_ParamValue, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteBySubjectName(string Original_SubjectName)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public class SQLiteTadSubjects : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadSubjects()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "Subjects";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("Category", "Category");
      tableMapping.ColumnMappings.Add("Age", "Age");
      tableMapping.ColumnMappings.Add("Sex", "Sex");
      tableMapping.ColumnMappings.Add("Handedness", "Handedness");
      tableMapping.ColumnMappings.Add("Comments", "Comments");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Subjects] WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ((@IsNull_Category = 1 AND [Category] IS NULL) OR ([Category] = @Original_Category)) AND ((@IsNull_Age = 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@IsNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Sex)) AND ((@IsNull_Handedness = 1 AND [Handedness] IS NULL) OR ([Handedness] = @Original_Handedness)) AND ((@IsNull_Comments = 1 AND [Comments] IS NULL) OR ([Comments] = @Original_Comments)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Category", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Sex", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Sex", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Handedness", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Handedness", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Comments", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Comments", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [Subjects] ([SubjectName], [Category], [Age], [Sex], [Handedness], [Comments]) VALUES (@SubjectName, @Category, @Age, @Sex, @Handedness, @Comments);
SELECT ID, SubjectName, Category, Age, Sex, Handedness, Comments FROM Subjects WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Sex", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Handedness", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Comments", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [Subjects] SET [SubjectName] = @SubjectName, [Category] = @Category, [Age] = @Age, [Sex] = @Sex, [Handedness] = @Handedness, [Comments] = @Comments WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ((@IsNull_Category = 1 AND [Category] IS NULL) OR ([Category] = @Original_Category)) AND ((@IsNull_Age = 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@IsNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Sex)) AND ((@IsNull_Handedness = 1 AND [Handedness] IS NULL) OR ([Handedness] = @Original_Handedness)) AND ((@IsNull_Comments = 1 AND [Comments] IS NULL) OR ([Comments] = @Original_Comments)));
SELECT ID, SubjectName, Category, Age, Sex, Handedness, Comments FROM Subjects WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Sex", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Handedness", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Comments", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Category", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Age", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Age", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Sex", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Sex", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sex", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Handedness", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Handedness", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Handedness", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Comments", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Comments", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[4];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, SubjectName, Category, Age, Sex, Handedness, Comments\r\nFROM       " +
          "  Subjects";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "SELECT     MIN(ID) AS MinID, COUNT(SubjectName) AS SubjectCount, Category\r\nFROM  " +
          "       Subjects\r\nGROUP BY Category";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "SELECT     COUNT(*) AS [RowCount], Category\r\nFROM         Subjects\r\nGROUP BY Cate" +
          "gory";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT Age, Category, Comments, Handedness, ID, Sex, SubjectName FROM Subjects WH" +
          "ERE (SubjectName = @Param1)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.SubjectsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.SubjectsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.SubjectsDataTable dataTable = new SQLiteOgamaDataSet.SubjectsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.SubjectsDataTable GetCategories()
    {
      this.Adapter.SelectCommand = this.CommandCollection[1];
      SQLiteOgamaDataSet.SubjectsDataTable dataTable = new SQLiteOgamaDataSet.SubjectsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.SubjectsDataTable GetCategoryRows()
    {
      this.Adapter.SelectCommand = this.CommandCollection[2];
      SQLiteOgamaDataSet.SubjectsDataTable dataTable = new SQLiteOgamaDataSet.SubjectsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.SubjectsDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.SubjectsDataTable dataTable = new SQLiteOgamaDataSet.SubjectsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.SubjectsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "Subjects");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(long Original_ID, string Original_SubjectName, string Original_Category, global::System.Nullable<int> Original_Age, string Original_Sex, string Original_Handedness, string Original_Comments)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      if ((Original_Category == null))
      {
        this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Category));
      }
      if ((Original_Age.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Age.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((Original_Sex == null))
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Sex));
      }
      if ((Original_Handedness == null))
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Handedness));
      }
      if ((Original_Comments == null))
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Comments));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, string Category, global::System.Nullable<int> Age, string Sex, string Handedness, string Comments)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      if ((Category == null))
      {
        this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Category));
      }
      if ((Age.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Age.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      if ((Sex == null))
      {
        this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Sex));
      }
      if ((Handedness == null))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Handedness));
      }
      if ((Comments == null))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Comments));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string SubjectName, string Category, global::System.Nullable<int> Age, string Sex, string Handedness, string Comments, long Original_ID, string Original_SubjectName, string Original_Category, global::System.Nullable<int> Original_Age, string Original_Sex, string Original_Handedness, string Original_Comments, long ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      if ((Category == null))
      {
        this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Category));
      }
      if ((Age.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Age.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      if ((Sex == null))
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Sex));
      }
      if ((Handedness == null))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Handedness));
      }
      if ((Comments == null))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Comments));
      }
      this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_SubjectName));
      }
      if ((Original_Category == null))
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Category));
      }
      if ((Original_Age.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Age.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
      }
      if ((Original_Sex == null))
      {
        this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Sex));
      }
      if ((Original_Handedness == null))
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Handedness));
      }
      if ((Original_Comments == null))
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Comments));
      }
      this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string SubjectName, string Category, global::System.Nullable<int> Age, string Sex, string Handedness, string Comments, long Original_ID, string Original_SubjectName, string Original_Category, global::System.Nullable<int> Original_Age, string Original_Sex, string Original_Handedness, string Original_Comments)
    {
      return this.Update(SubjectName, Category, Age, Sex, Handedness, Comments, Original_ID, Original_SubjectName, Original_Category, Original_Age, Original_Sex, Original_Handedness, Original_Comments, Original_ID);
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadTrials : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadTrials()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "Trials";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("TrialID", "TrialID");
      tableMapping.ColumnMappings.Add("TrialName", "TrialName");
      tableMapping.ColumnMappings.Add("TrialSequence", "TrialSequence");
      tableMapping.ColumnMappings.Add("Category", "Category");
      tableMapping.ColumnMappings.Add("TrialStartTime", "TrialStartTime");
      tableMapping.ColumnMappings.Add("Duration", "Duration");
      tableMapping.ColumnMappings.Add("EliminateData", "EliminateData");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Trials] WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ((@IsNull_TrialName = 1 AND [TrialName] IS NULL) OR ([TrialName] = @Original_TrialName)) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_Category = 1 AND [Category] IS NULL) OR ([Category] = @Original_Category)) AND ((@IsNull_TrialStartTime = 1 AND [TrialStartTime] IS NULL) OR ([TrialStartTime] = @Original_TrialStartTime)) AND ((@IsNull_Duration = 1 AND [Duration] IS NULL) OR ([Duration] = @Original_Duration)) AND ((@IsNull_EliminateData = 1 AND [EliminateData] IS NULL) OR ([EliminateData] = @Original_EliminateData)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_TrialName", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Category", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_TrialStartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialStartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EliminateData", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EliminateData", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [Trials] ([SubjectName], [TrialID], [TrialName], [TrialSequence], [Category], [TrialStartTime], [Duration], [EliminateData]) VALUES (@SubjectName, @TrialID, @TrialName, @TrialSequence, @Category, @TrialStartTime, @Duration, @EliminateData);
SELECT ID, SubjectName, TrialID, TrialName, TrialSequence, Category, TrialStartTime, Duration, EliminateData FROM Trials WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialStartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EliminateData", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [Trials] SET [SubjectName] = @SubjectName, [TrialID] = @TrialID, [TrialName] = @TrialName, [TrialSequence] = @TrialSequence, [Category] = @Category, [TrialStartTime] = @TrialStartTime, [Duration] = @Duration, [EliminateData] = @EliminateData WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ((@IsNull_TrialName = 1 AND [TrialName] IS NULL) OR ([TrialName] = @Original_TrialName)) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_Category = 1 AND [Category] IS NULL) OR ([Category] = @Original_Category)) AND ((@IsNull_TrialStartTime = 1 AND [TrialStartTime] IS NULL) OR ([TrialStartTime] = @Original_TrialStartTime)) AND ((@IsNull_Duration = 1 AND [Duration] IS NULL) OR ([Duration] = @Original_Duration)) AND ((@IsNull_EliminateData = 1 AND [EliminateData] IS NULL) OR ([EliminateData] = @Original_EliminateData)));
SELECT ID, SubjectName, TrialID, TrialName, TrialSequence, Category, TrialStartTime, Duration, EliminateData FROM Trials WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialStartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EliminateData", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_TrialName", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Category", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Category", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_TrialStartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialStartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialStartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Duration", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EliminateData", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EliminateData", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[8];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, SubjectName, TrialID, TrialName, TrialSequence, Category, TrialSta" +
          "rtTime, Duration, EliminateData\r\nFROM         Trials";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM [Trials] WHERE ([SubjectName] = @Original_SubjectName)";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "SELECT     Category\r\nFROM         Trials\r\nGROUP BY Category";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT Category, Duration, EliminateData, ID, SubjectName, TrialID, TrialName, Tr" +
          "ialSequence, TrialStartTime FROM Trials WHERE (SubjectName = @Param1)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[4].Connection = this.Connection;
      this._commandCollection[4].CommandText = "SELECT Category, Duration, EliminateData, ID, SubjectName, TrialID, TrialName, Tr" +
          "ialSequence, TrialStartTime FROM Trials WHERE (SubjectName = @Param1) AND (Trial" +
          "Sequence = @Param2)";
      this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[5].Connection = this.Connection;
      this._commandCollection[5].CommandText = "SELECT Category, Duration, EliminateData, ID, SubjectName, TrialID, TrialName, Tr" +
          "ialSequence, TrialStartTime FROM Trials WHERE (SubjectName = @Param1) AND (Trial" +
          "ID = @Param2)";
      this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[6].Connection = this.Connection;
      this._commandCollection[6].CommandText = "SELECT     SubjectName, TrialID, TrialSequence\r\nFROM         Trials\r\nWHERE     (S" +
          "ubjectName = @Param1) AND (TrialID = @Param2)\r\nGROUP BY SubjectName, TrialID, Tr" +
          "ialSequence";
      this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[6].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[7] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[7].Connection = this.Connection;
      this._commandCollection[7].CommandText = "UPDATE    Trials\r\nSET              EliminateData = @EliminateData\r\nWHERE     (ID " +
          "= @Original_ID);   ";
      this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EliminateData", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "EliminateData", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.TrialsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetCategories()
    {
      this.Adapter.SelectCommand = this.CommandCollection[2];
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetDataBySubjectAndSequence(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[4];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetDataBySubjectAndTrialID(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[5];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialsDataTable GetTrialSequenceBySubjectAndTrialID(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[6];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.TrialsDataTable dataTable = new SQLiteOgamaDataSet.TrialsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.TrialsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "Trials");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(long Original_ID, string Original_SubjectName, int Original_TrialID, string Original_TrialName, int Original_TrialSequence, string Original_Category, global::System.Nullable<long> Original_TrialStartTime, global::System.Nullable<int> Original_Duration, string Original_EliminateData)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TrialID));
      if ((Original_TrialName == null))
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_TrialName));
      }
      this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_TrialSequence));
      if ((Original_Category == null))
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Category));
      }
      if ((Original_TrialStartTime.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_TrialStartTime.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      if ((Original_Duration.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_Duration.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
      }
      if ((Original_EliminateData == null))
      {
        this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_EliminateData));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, int TrialID, string TrialName, int TrialSequence, string Category, global::System.Nullable<long> TrialStartTime, global::System.Nullable<int> Duration, string EliminateData)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TrialID));
      if ((TrialName == null))
      {
        this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TrialName));
      }
      this.Adapter.InsertCommand.Parameters[3].Value = ((int)(TrialSequence));
      if ((Category == null))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Category));
      }
      if ((TrialStartTime.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((long)(TrialStartTime.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((Duration.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Duration.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((EliminateData == null))
      {
        this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[7].Value = ((string)(EliminateData));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                string TrialName,
                int TrialSequence,
                string Category,
                global::System.Nullable<long> TrialStartTime,
                global::System.Nullable<int> Duration,
                string EliminateData,
                long Original_ID,
                string Original_SubjectName,
                int Original_TrialID,
                string Original_TrialName,
                int Original_TrialSequence,
                string Original_Category,
                global::System.Nullable<long> Original_TrialStartTime,
                global::System.Nullable<int> Original_Duration,
                string Original_EliminateData,
                long ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TrialID));
      if ((TrialName == null))
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TrialName));
      }
      this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(TrialSequence));
      if ((Category == null))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Category));
      }
      if ((TrialStartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(TrialStartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((Duration.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Duration.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((EliminateData == null))
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(EliminateData));
      }
      this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_TrialID));
      if ((Original_TrialName == null))
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_TrialName));
      }
      this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_TrialSequence));
      if ((Original_Category == null))
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Category));
      }
      if ((Original_TrialStartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_TrialStartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
      }
      if ((Original_Duration.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_Duration.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
      }
      if ((Original_EliminateData == null))
      {
        this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_EliminateData));
      }
      this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                string TrialName,
                int TrialSequence,
                string Category,
                global::System.Nullable<long> TrialStartTime,
                global::System.Nullable<int> Duration,
                string EliminateData,
                long Original_ID,
                string Original_SubjectName,
                int Original_TrialID,
                string Original_TrialName,
                int Original_TrialSequence,
                string Original_Category,
                global::System.Nullable<long> Original_TrialStartTime,
                global::System.Nullable<int> Original_Duration,
                string Original_EliminateData)
    {
      return this.Update(SubjectName, TrialID, TrialName, TrialSequence, Category, TrialStartTime, Duration, EliminateData, Original_ID, Original_SubjectName, Original_TrialID, Original_TrialName, Original_TrialSequence, Original_Category, Original_TrialStartTime, Original_Duration, Original_EliminateData, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteBySubjectName(string Original_SubjectName)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
    public virtual int UpdateEliminateByID(string EliminateData, long Original_ID)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[7];
      if ((EliminateData == null))
      {
        command.Parameters[0].Value = global::System.DBNull.Value;
      }
      else
      {
        command.Parameters[0].Value = ((string)(EliminateData));
      }
      command.Parameters[1].Value = ((long)(Original_ID));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadTrialEvents : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadTrialEvents()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "TrialEvents";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("TrialSequence", "TrialSequence");
      tableMapping.ColumnMappings.Add("EventID", "EventID");
      tableMapping.ColumnMappings.Add("EventTime", "EventTime");
      tableMapping.ColumnMappings.Add("EventType", "EventType");
      tableMapping.ColumnMappings.Add("EventTask", "EventTask");
      tableMapping.ColumnMappings.Add("EventParam", "EventParam");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TrialEvents] WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialSequence] = @Original_TrialSequence) AND ([EventID] = @Original_EventID) AND ([EventTime] = @Original_EventTime) AND ([EventType] = @Original_EventType) AND ((@IsNull_EventTask = 1 AND [EventTask] IS NULL) OR ([EventTask] = @Original_EventTask)) AND ((@IsNull_EventParam = 1 AND [EventParam] IS NULL) OR ([EventParam] = @Original_EventParam)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventType", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventTask", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventTask", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventParam", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventParam", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [TrialEvents] ([SubjectName], [TrialSequence], [EventID], [EventTime], [EventType], [EventTask], [EventParam]) VALUES (@SubjectName, @TrialSequence, @EventID, @EventTime, @EventType, @EventTask, @EventParam);
SELECT ID, SubjectName, TrialSequence, EventID, EventTime, EventType, EventTask, EventParam FROM TrialEvents WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventType", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventTask", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventParam", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [TrialEvents] SET [SubjectName] = @SubjectName, [TrialSequence] = @TrialSequence, [EventID] = @EventID, [EventTime] = @EventTime, [EventType] = @EventType, [EventTask] = @EventTask, [EventParam] = @EventParam WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialSequence] = @Original_TrialSequence) AND ([EventID] = @Original_EventID) AND ([EventTime] = @Original_EventTime) AND ([EventType] = @Original_EventType) AND ((@IsNull_EventTask = 1 AND [EventTask] IS NULL) OR ([EventTask] = @Original_EventTask)) AND ((@IsNull_EventParam = 1 AND [EventParam] IS NULL) OR ([EventParam] = @Original_EventParam)));
SELECT ID, SubjectName, TrialSequence, EventID, EventTime, EventType, EventTask, EventParam FROM TrialEvents WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventType", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventTask", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventParam", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventType", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventTask", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventTask", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventTask", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventParam", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventParam", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[9];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, SubjectName, TrialSequence, EventID, EventTime, EventType, EventTa" +
          "sk, EventParam\r\nFROM         TrialEvents";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM [TrialEvents] WHERE  (SubjectName = @Original_SubjectName)";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "DELETE FROM [TrialEvents] \r\nWHERE (([SubjectName] = @Original_SubjectName) AND ([" +
          "TrialSequence] = @Original_TrialSequence) AND ([EventID] = @Original_EventID))";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT EventID, EventParam, EventTask, EventTime, EventType, ID, SubjectName, Tri" +
          "alSequence FROM TrialEvents WHERE (SubjectName = @Param1)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[4].Connection = this.Connection;
      this._commandCollection[4].CommandText = "SELECT EventID, EventParam, EventTask, EventTime, EventType, ID, SubjectName, Tri" +
          "alSequence FROM TrialEvents WHERE (SubjectName = @Param1) AND (TrialSequence = @" +
          "Param2)";
      this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[5].Connection = this.Connection;
      this._commandCollection[5].CommandText = "SELECT     ID, SubjectName, TrialSequence, EventID, EventTime, EventType, EventTa" +
          "sk, EventParam\r\nFROM         TrialEvents\r\nWHERE     (SubjectName = @Param1) AND " +
          "(TrialSequence = @Param2) AND (EventType = \'Response\') AND (EventTask = \'SlideCh" +
          "ange\')";
      this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[6].Connection = this.Connection;
      this._commandCollection[6].CommandText = "SELECT     MAX(EventID) AS Expr1\r\nFROM         TrialEvents";
      this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[7] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[7].Connection = this.Connection;
      this._commandCollection[7].CommandText = "UPDATE    TrialEvents\r\nSET              EventParam = @EventParam\r\nWHERE     (Subj" +
          "ectName = @Original_SubjectName) AND (TrialSequence = @Original_TrialSequence) A" +
          "ND (EventID = @Original_EventID)";
      this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventParam", global::System.Data.DbType.String, 4000, global::System.Data.ParameterDirection.Input, 0, 0, "EventParam", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[8] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[8].Connection = this.Connection;
      this._commandCollection[8].CommandText = "UPDATE    TrialEvents\r\nSET           EventTime = @EventTime\r\nWHERE     (SubjectNa" +
          "me = @Original_SubjectName) AND (TrialSequence = @Original_TrialSequence) AND (E" +
          "ventID = @Original_EventID)";
      this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[8].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventTime", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "EventTime", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[8].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[8].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[8].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.TrialEventsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.TrialEventsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.TrialEventsDataTable dataTable = new SQLiteOgamaDataSet.TrialEventsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialEventsDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.TrialEventsDataTable dataTable = new SQLiteOgamaDataSet.TrialEventsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialEventsDataTable GetDataBySubjectAndSequence(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[4];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.TrialEventsDataTable dataTable = new SQLiteOgamaDataSet.TrialEventsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.TrialEventsDataTable GetDataBySubjectNameTrialSequenceButOnlySlideChangeResponses(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[5];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.TrialEventsDataTable dataTable = new SQLiteOgamaDataSet.TrialEventsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.TrialEventsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "TrialEvents");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(int Original_ID, string Original_SubjectName, int Original_TrialSequence, int Original_EventID, long Original_EventTime, string Original_EventType, string Original_EventTask, string Original_EventParam)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TrialSequence));
      this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_EventID));
      this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_EventTime));
      if ((Original_EventType == null))
      {
        throw new global::System.ArgumentNullException("Original_EventType");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_EventType));
      }
      if ((Original_EventTask == null))
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_EventTask));
      }
      if ((Original_EventParam == null))
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_EventParam));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, int TrialSequence, int EventID, long EventTime, string EventType, string EventTask, string EventParam)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TrialSequence));
      this.Adapter.InsertCommand.Parameters[2].Value = ((int)(EventID));
      this.Adapter.InsertCommand.Parameters[3].Value = ((long)(EventTime));
      if ((EventType == null))
      {
        throw new global::System.ArgumentNullException("EventType");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((string)(EventType));
      }
      if ((EventTask == null))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((string)(EventTask));
      }
      if ((EventParam == null))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((string)(EventParam));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialSequence,
                int EventID,
                long EventTime,
                string EventType,
                string EventTask,
                string EventParam,
                int Original_ID,
                string Original_SubjectName,
                int Original_TrialSequence,
                int Original_EventID,
                long Original_EventTime,
                string Original_EventType,
                string Original_EventTask,
                string Original_EventParam,
                int ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TrialSequence));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(EventID));
      this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(EventTime));
      if ((EventType == null))
      {
        throw new global::System.ArgumentNullException("EventType");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(EventType));
      }
      if ((EventTask == null))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(EventTask));
      }
      if ((EventParam == null))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(EventParam));
      }
      this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_TrialSequence));
      this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_EventID));
      this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_EventTime));
      if ((Original_EventType == null))
      {
        throw new global::System.ArgumentNullException("Original_EventType");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_EventType));
      }
      if ((Original_EventTask == null))
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_EventTask));
      }
      if ((Original_EventParam == null))
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_EventParam));
      }
      this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string SubjectName, int TrialSequence, int EventID, long EventTime, string EventType, string EventTask, string EventParam, int Original_ID, string Original_SubjectName, int Original_TrialSequence, int Original_EventID, long Original_EventTime, string Original_EventType, string Original_EventTask, string Original_EventParam)
    {
      return this.Update(SubjectName, TrialSequence, EventID, EventTime, EventType, EventTask, EventParam, Original_ID, Original_SubjectName, Original_TrialSequence, Original_EventID, Original_EventTime, Original_EventType, Original_EventTask, Original_EventParam, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteBySubjectName(string Original_SubjectName)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteEventBySubjectNameTrialSequenceEventID(string Original_SubjectName, int Original_TrialSequence, int Original_EventID)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[2];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      command.Parameters[1].Value = ((int)(Original_TrialSequence));
      command.Parameters[2].Value = ((int)(Original_EventID));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    public virtual global::System.Nullable<int> GetMaxEventID()
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[6];
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      object returnValue;
      try
      {
        returnValue = command.ExecuteScalar();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      if (((returnValue == null)
                  || (returnValue.GetType() == typeof(global::System.DBNull))))
      {
        return new global::System.Nullable<int>();
      }
      else
      {
        return new global::System.Nullable<int>(((int)(returnValue)));
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
    public virtual int UpdateEventParamBySubjectNameTrialSequenceEventID(string EventParam, string Original_SubjectName, int Original_TrialSequence, int Original_EventID)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[7];
      if ((EventParam == null))
      {
        command.Parameters[0].Value = global::System.DBNull.Value;
      }
      else
      {
        command.Parameters[0].Value = ((string)(EventParam));
      }
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      command.Parameters[2].Value = ((int)(Original_TrialSequence));
      command.Parameters[3].Value = ((int)(Original_EventID));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
    public virtual int UpdateEventTimeBySubjectSequenceID(long EventTime, string Original_SubjectName, int Original_TrialSequence, int Original_EventID)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[8];
      command.Parameters[0].Value = ((long)(EventTime));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      command.Parameters[2].Value = ((int)(Original_TrialSequence));
      command.Parameters[3].Value = ((int)(Original_EventID));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadRawdata : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadRawdata()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "Rawdata";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("TrialSequence", "TrialSequence");
      tableMapping.ColumnMappings.Add("Time", "Time");
      tableMapping.ColumnMappings.Add("PupilDiaX", "PupilDiaX");
      tableMapping.ColumnMappings.Add("PupilDiaY", "PupilDiaY");
      tableMapping.ColumnMappings.Add("GazePosX", "GazePosX");
      tableMapping.ColumnMappings.Add("GazePosY", "GazePosY");
      tableMapping.ColumnMappings.Add("MousePosX", "MousePosX");
      tableMapping.ColumnMappings.Add("MousePosY", "MousePosY");
      tableMapping.ColumnMappings.Add("EventID", "EventID");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Rawdata] WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialSequence] = @Original_TrialSequence) AND ([Time] = @Original_Time) AND ((@IsNull_PupilDiaX = 1 AND [PupilDiaX] IS NULL) OR ([PupilDiaX] = @Original_PupilDiaX)) AND ((@IsNull_PupilDiaY = 1 AND [PupilDiaY] IS NULL) OR ([PupilDiaY] = @Original_PupilDiaY)) AND ((@IsNull_GazePosX = 1 AND [GazePosX] IS NULL) OR ([GazePosX] = @Original_GazePosX)) AND ((@IsNull_GazePosY = 1 AND [GazePosY] IS NULL) OR ([GazePosY] = @Original_GazePosY)) AND ((@IsNull_MousePosX = 1 AND [MousePosX] IS NULL) OR ([MousePosX] = @Original_MousePosX)) AND ((@IsNull_MousePosY = 1 AND [MousePosY] IS NULL) OR ([MousePosY] = @Original_MousePosY)) AND ((@IsNull_EventID = 1 AND [EventID] IS NULL) OR ([EventID] = @Original_EventID)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Time", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PupilDiaX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PupilDiaX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PupilDiaY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PupilDiaY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_GazePosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_GazePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_GazePosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_GazePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_MousePosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_MousePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_MousePosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_MousePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [Rawdata] ([SubjectName], [TrialSequence], [Time], [PupilDiaX], [PupilDiaY], [GazePosX], [GazePosY], [MousePosX], [MousePosY], [EventID]) VALUES (@SubjectName, @TrialSequence, @Time, @PupilDiaX, @PupilDiaY, @GazePosX, @GazePosY, @MousePosX, @MousePosY, @EventID);
SELECT ID, SubjectName, TrialSequence, Time, PupilDiaX, PupilDiaY, GazePosX, GazePosY, MousePosX, MousePosY, EventID FROM Rawdata WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Time", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PupilDiaX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PupilDiaY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@GazePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@GazePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@MousePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@MousePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [Rawdata] SET [SubjectName] = @SubjectName, [TrialSequence] = @TrialSequence, [Time] = @Time, [PupilDiaX] = @PupilDiaX, [PupilDiaY] = @PupilDiaY, [GazePosX] = @GazePosX, [GazePosY] = @GazePosY, [MousePosX] = @MousePosX, [MousePosY] = @MousePosY, [EventID] = @EventID WHERE (([ID] = @Original_ID) AND ([SubjectName] = @Original_SubjectName) AND ([TrialSequence] = @Original_TrialSequence) AND ([Time] = @Original_Time) AND ((@IsNull_PupilDiaX = 1 AND [PupilDiaX] IS NULL) OR ([PupilDiaX] = @Original_PupilDiaX)) AND ((@IsNull_PupilDiaY = 1 AND [PupilDiaY] IS NULL) OR ([PupilDiaY] = @Original_PupilDiaY)) AND ((@IsNull_GazePosX = 1 AND [GazePosX] IS NULL) OR ([GazePosX] = @Original_GazePosX)) AND ((@IsNull_GazePosY = 1 AND [GazePosY] IS NULL) OR ([GazePosY] = @Original_GazePosY)) AND ((@IsNull_MousePosX = 1 AND [MousePosX] IS NULL) OR ([MousePosX] = @Original_MousePosX)) AND ((@IsNull_MousePosY = 1 AND [MousePosY] IS NULL) OR ([MousePosY] = @Original_MousePosY)) AND ((@IsNull_EventID = 1 AND [EventID] IS NULL) OR ([EventID] = @Original_EventID)));
SELECT ID, SubjectName, TrialSequence, Time, PupilDiaX, PupilDiaY, GazePosX, GazePosY, MousePosX, MousePosY, EventID FROM Rawdata WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Time", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PupilDiaX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PupilDiaY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@GazePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@GazePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@MousePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@MousePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Time", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PupilDiaX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PupilDiaX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PupilDiaY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PupilDiaY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PupilDiaY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_GazePosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_GazePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_GazePosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_GazePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GazePosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_MousePosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_MousePosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_MousePosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_MousePosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MousePosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_EventID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EventID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, SubjectName, TrialSequence, Time, PupilDiaX, PupilDiaY, GazePosX, " +
          "GazePosY, MousePosX, MousePosY, EventID\r\nFROM         Rawdata";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.RawdataDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.RawdataDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.RawdataDataTable dataTable = new SQLiteOgamaDataSet.RawdataDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.RawdataDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "Rawdata");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(long Original_ID, string Original_SubjectName, int Original_TrialSequence, long Original_Time, global::System.Nullable<double> Original_PupilDiaX, global::System.Nullable<double> Original_PupilDiaY, global::System.Nullable<double> Original_GazePosX, global::System.Nullable<double> Original_GazePosY, global::System.Nullable<double> Original_MousePosX, global::System.Nullable<double> Original_MousePosY, global::System.Nullable<int> Original_EventID)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TrialSequence));
      this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_Time));
      if ((Original_PupilDiaX.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_PupilDiaX.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((Original_PupilDiaY.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_PupilDiaY.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      if ((Original_GazePosX.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_GazePosX.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      if ((Original_GazePosY.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_GazePosY.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
      }
      if ((Original_MousePosX.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_MousePosX.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
      }
      if ((Original_MousePosY.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[15].Value = ((double)(Original_MousePosY.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
      }
      if ((Original_EventID.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_EventID.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, int TrialSequence, long Time, global::System.Nullable<double> PupilDiaX, global::System.Nullable<double> PupilDiaY, global::System.Nullable<double> GazePosX, global::System.Nullable<double> GazePosY, global::System.Nullable<double> MousePosX, global::System.Nullable<double> MousePosY, global::System.Nullable<int> EventID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TrialSequence));
      this.Adapter.InsertCommand.Parameters[2].Value = ((long)(Time));
      if ((PupilDiaX.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[3].Value = ((double)(PupilDiaX.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((PupilDiaY.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((double)(PupilDiaY.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((GazePosX.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((double)(GazePosX.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((GazePosY.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((double)(GazePosY.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((MousePosX.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[7].Value = ((double)(MousePosX.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      if ((MousePosY.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[8].Value = ((double)(MousePosY.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
      }
      if ((EventID.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[9].Value = ((int)(EventID.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialSequence,
                long Time,
                global::System.Nullable<double> PupilDiaX,
                global::System.Nullable<double> PupilDiaY,
                global::System.Nullable<double> GazePosX,
                global::System.Nullable<double> GazePosY,
                global::System.Nullable<double> MousePosX,
                global::System.Nullable<double> MousePosY,
                global::System.Nullable<int> EventID,
                long Original_ID,
                string Original_SubjectName,
                int Original_TrialSequence,
                long Original_Time,
                global::System.Nullable<double> Original_PupilDiaX,
                global::System.Nullable<double> Original_PupilDiaY,
                global::System.Nullable<double> Original_GazePosX,
                global::System.Nullable<double> Original_GazePosY,
                global::System.Nullable<double> Original_MousePosX,
                global::System.Nullable<double> Original_MousePosY,
                global::System.Nullable<int> Original_EventID,
                long ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TrialSequence));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Time));
      if ((PupilDiaX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(PupilDiaX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((PupilDiaY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(PupilDiaY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((GazePosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(GazePosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((GazePosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(GazePosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((MousePosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(MousePosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      if ((MousePosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(MousePosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
      }
      if ((EventID.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(EventID.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
      }
      this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_ID));
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_TrialSequence));
      this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_Time));
      if ((Original_PupilDiaX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(Original_PupilDiaX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
      }
      if ((Original_PupilDiaY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(Original_PupilDiaY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
      }
      if ((Original_GazePosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_GazePosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
      }
      if ((Original_GazePosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_GazePosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
      }
      if ((Original_MousePosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_MousePosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
      }
      if ((Original_MousePosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_MousePosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
      }
      if ((Original_EventID.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_EventID.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
      }
      this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialSequence,
                long Time,
                global::System.Nullable<double> PupilDiaX,
                global::System.Nullable<double> PupilDiaY,
                global::System.Nullable<double> GazePosX,
                global::System.Nullable<double> GazePosY,
                global::System.Nullable<double> MousePosX,
                global::System.Nullable<double> MousePosY,
                global::System.Nullable<int> EventID,
                long Original_ID,
                string Original_SubjectName,
                int Original_TrialSequence,
                long Original_Time,
                global::System.Nullable<double> Original_PupilDiaX,
                global::System.Nullable<double> Original_PupilDiaY,
                global::System.Nullable<double> Original_GazePosX,
                global::System.Nullable<double> Original_GazePosY,
                global::System.Nullable<double> Original_MousePosX,
                global::System.Nullable<double> Original_MousePosY,
                global::System.Nullable<int> Original_EventID)
    {
      return this.Update(SubjectName, TrialSequence, Time, PupilDiaX, PupilDiaY, GazePosX, GazePosY, MousePosX, MousePosY, EventID, Original_ID, Original_SubjectName, Original_TrialSequence, Original_Time, Original_PupilDiaX, Original_PupilDiaY, Original_GazePosX, Original_GazePosY, Original_MousePosX, Original_MousePosY, Original_EventID, Original_ID);
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadAOIs : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadAOIs()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "AOIs";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("TrialID", "TrialID");
      tableMapping.ColumnMappings.Add("SlideNr", "SlideNr");
      tableMapping.ColumnMappings.Add("ShapeName", "ShapeName");
      tableMapping.ColumnMappings.Add("ShapeType", "ShapeType");
      tableMapping.ColumnMappings.Add("ShapeNumPts", "ShapeNumPts");
      tableMapping.ColumnMappings.Add("ShapePts", "ShapePts");
      tableMapping.ColumnMappings.Add("ShapeGroup", "ShapeGroup");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AOIs] WHERE (([ID] = @Original_ID) AND ([TrialID] = @Original_TrialID) AND ([SlideNr] = @Original_SlideNr) AND ((@IsNull_ShapeName = 1 AND [ShapeName] IS NULL) OR ([ShapeName] = @Original_ShapeName)) AND ((@IsNull_ShapeType = 1 AND [ShapeType] IS NULL) OR ([ShapeType] = @Original_ShapeType)) AND ((@IsNull_ShapeNumPts = 1 AND [ShapeNumPts] IS NULL) OR ([ShapeNumPts] = @Original_ShapeNumPts)) AND ((@IsNull_ShapePts = 1 AND [ShapePts] IS NULL) OR ([ShapePts] = @Original_ShapePts)) AND ((@IsNull_ShapeGroup = 1 AND [ShapeGroup] IS NULL) OR ([ShapeGroup] = @Original_ShapeGroup)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SlideNr", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideNr", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeName", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeType", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapePts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapePts", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeGroup", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [AOIs] ([TrialID], [SlideNr], [ShapeName], [ShapeType], [ShapeNumPts], [ShapePts], [ShapeGroup]) VALUES (@TrialID, @SlideNr, @ShapeName, @ShapeType, @ShapeNumPts, @ShapePts, @ShapeGroup);
SELECT ID, TrialID, SlideNr, ShapeName, ShapeType, ShapeNumPts, ShapePts, ShapeGroup FROM AOIs WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SlideNr", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideNr", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapePts", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [AOIs] SET [TrialID] = @TrialID, [SlideNr] = @SlideNr, [ShapeName] = @ShapeName, [ShapeType] = @ShapeType, [ShapeNumPts] = @ShapeNumPts, [ShapePts] = @ShapePts, [ShapeGroup] = @ShapeGroup WHERE (([ID] = @Original_ID) AND ([TrialID] = @Original_TrialID) AND ([SlideNr] = @Original_SlideNr) AND ((@IsNull_ShapeName = 1 AND [ShapeName] IS NULL) OR ([ShapeName] = @Original_ShapeName)) AND ((@IsNull_ShapeType = 1 AND [ShapeType] IS NULL) OR ([ShapeType] = @Original_ShapeType)) AND ((@IsNull_ShapeNumPts = 1 AND [ShapeNumPts] IS NULL) OR ([ShapeNumPts] = @Original_ShapeNumPts)) AND ((@IsNull_ShapePts = 1 AND [ShapePts] IS NULL) OR ([ShapePts] = @Original_ShapePts)) AND ((@IsNull_ShapeGroup = 1 AND [ShapeGroup] IS NULL) OR ([ShapeGroup] = @Original_ShapeGroup)));
SELECT ID, TrialID, SlideNr, ShapeName, ShapeType, ShapeNumPts, ShapePts, ShapeGroup FROM AOIs WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SlideNr", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideNr", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapePts", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SlideNr", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideNr", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeName", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeType", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeType", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeType", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeNumPts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeNumPts", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapePts", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapePts", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapePts", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_ShapeGroup", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[7];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, TrialID, SlideNr, ShapeName, ShapeType, ShapeNumPts, ShapePts, Sha" +
          "peGroup\r\nFROM         AOIs";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM AOIs\r\nWHERE     (ID = @Original_ID)";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "SELECT ID, ShapeGroup, ShapeName, ShapeNumPts, ShapePts, ShapeType, SlideNr, Tria" +
          "lID FROM AOIs WHERE (TrialID = @Param1)";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT ID, ShapeGroup, ShapeName, ShapeNumPts, ShapePts, ShapeType, SlideNr, Tria" +
          "lID FROM AOIs WHERE (TrialID = @Param1) AND (ShapeGroup = @Param2)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[4].Connection = this.Connection;
      this._commandCollection[4].CommandText = "SELECT ID, ShapeGroup, ShapeName, ShapeNumPts, ShapePts, ShapeType, SlideNr, Tria" +
          "lID FROM AOIs WHERE (TrialID = @Param1) AND (ShapeName = @Param2)";
      this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[5].Connection = this.Connection;
      this._commandCollection[5].CommandText = "SELECT ID, ShapeGroup, ShapeName, ShapeNumPts, ShapePts, ShapeType, SlideNr, Tria" +
          "lID FROM AOIs GROUP BY ShapeGroup, TrialID HAVING (TrialID = @Param1)";
      this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[6].Connection = this.Connection;
      this._commandCollection[6].CommandText = "SELECT ID, ShapeGroup, ShapeName, ShapeNumPts, ShapePts, ShapeType, SlideNr, Tria" +
          "lID FROM AOIs WHERE (TrialID = @Param1) AND (ShapeGroup = \'Target\')";
      this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[6].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.AOIsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetDataByTrialID(int Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[2];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetDataByTrialIDAndGroup(int Param1, string Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      if ((Param2 == null))
      {
        this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Param2));
      }
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetDataByTrialIDAndShapeName(int Param1, string Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[4];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      if ((Param2 == null))
      {
        this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Param2));
      }
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetGroupsByTrialID(int Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[5];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.AOIsDataTable GetTargetsByTrialID(int Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[6];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      SQLiteOgamaDataSet.AOIsDataTable dataTable = new SQLiteOgamaDataSet.AOIsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.AOIsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "AOIs");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(int Original_ID, int Original_TrialID, int Original_SlideNr, string Original_ShapeName, string Original_ShapeType, global::System.Nullable<int> Original_ShapeNumPts, string Original_ShapePts, string Original_ShapeGroup)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TrialID));
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_SlideNr));
      if ((Original_ShapeName == null))
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ShapeName));
      }
      if ((Original_ShapeType == null))
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ShapeType));
      }
      if ((Original_ShapeNumPts.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_ShapeNumPts.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
      }
      if ((Original_ShapePts == null))
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ShapePts));
      }
      if ((Original_ShapeGroup == null))
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ShapeGroup));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(int TrialID, int SlideNr, string ShapeName, string ShapeType, global::System.Nullable<int> ShapeNumPts, string ShapePts, string ShapeGroup)
    {
      this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TrialID));
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SlideNr));
      if ((ShapeName == null))
      {
        this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ShapeName));
      }
      if ((ShapeType == null))
      {
        this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ShapeType));
      }
      if ((ShapeNumPts.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ShapeNumPts.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((ShapePts == null))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ShapePts));
      }
      if ((ShapeGroup == null))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ShapeGroup));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                int TrialID,
                int SlideNr,
                string ShapeName,
                string ShapeType,
                global::System.Nullable<int> ShapeNumPts,
                string ShapePts,
                string ShapeGroup,
                int Original_ID,
                int Original_TrialID,
                int Original_SlideNr,
                string Original_ShapeName,
                string Original_ShapeType,
                global::System.Nullable<int> Original_ShapeNumPts,
                string Original_ShapePts,
                string Original_ShapeGroup,
                int ID)
    {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TrialID));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SlideNr));
      if ((ShapeName == null))
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ShapeName));
      }
      if ((ShapeType == null))
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ShapeType));
      }
      if ((ShapeNumPts.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ShapeNumPts.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((ShapePts == null))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ShapePts));
      }
      if ((ShapeGroup == null))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ShapeGroup));
      }
      this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
      this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_TrialID));
      this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SlideNr));
      if ((Original_ShapeName == null))
      {
        this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_ShapeName));
      }
      if ((Original_ShapeType == null))
      {
        this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ShapeType));
      }
      if ((Original_ShapeNumPts.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ShapeNumPts.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
      }
      if ((Original_ShapePts == null))
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_ShapePts));
      }
      if ((Original_ShapeGroup == null))
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ShapeGroup));
      }
      this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(int TrialID, int SlideNr, string ShapeName, string ShapeType, global::System.Nullable<int> ShapeNumPts, string ShapePts, string ShapeGroup, int Original_ID, int Original_TrialID, int Original_SlideNr, string Original_ShapeName, string Original_ShapeType, global::System.Nullable<int> Original_ShapeNumPts, string Original_ShapePts, string Original_ShapeGroup)
    {
      return this.Update(TrialID, SlideNr, ShapeName, ShapeType, ShapeNumPts, ShapePts, ShapeGroup, Original_ID, Original_TrialID, Original_SlideNr, Original_ShapeName, Original_ShapeType, Original_ShapeNumPts, Original_ShapePts, Original_ShapeGroup, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteByID(int Original_ID)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      command.Parameters[0].Value = ((int)(Original_ID));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadShapeGroups : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadShapeGroups()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "ShapeGroups";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("ShapeGroup", "ShapeGroup");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = "DELETE FROM [ShapeGroups] WHERE (([ID] = @Original_ID) AND ([ShapeGroup] = @Origi" +
          "nal_ShapeGroup))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = "INSERT INTO [ShapeGroups] ([ShapeGroup]) VALUES (@ShapeGroup);\r\nSELECT ID, ShapeG" +
          "roup FROM ShapeGroups WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = "UPDATE [ShapeGroups] SET [ShapeGroup] = @ShapeGroup WHERE (([ID] = @Original_ID) " +
          "AND ([ShapeGroup] = @Original_ShapeGroup));\r\nSELECT ID, ShapeGroup FROM ShapeGro" +
          "ups WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ShapeGroup", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[2];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT     ID, ShapeGroup\r\nFROM         ShapeGroups";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "SELECT ID, ShapeGroup FROM ShapeGroups WHERE (ShapeGroup = @Param1)";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ShapeGroup", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.ShapeGroupsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.ShapeGroupsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.ShapeGroupsDataTable dataTable = new SQLiteOgamaDataSet.ShapeGroupsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.ShapeGroupsDataTable GetDataByGroup(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[1];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.ShapeGroupsDataTable dataTable = new SQLiteOgamaDataSet.ShapeGroupsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.ShapeGroupsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "ShapeGroups");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(int Original_ID, string Original_ShapeGroup)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
      if ((Original_ShapeGroup == null))
      {
        throw new global::System.ArgumentNullException("Original_ShapeGroup");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ShapeGroup));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string ShapeGroup)
    {
      if ((ShapeGroup == null))
      {
        throw new global::System.ArgumentNullException("ShapeGroup");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ShapeGroup));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string ShapeGroup, int Original_ID, string Original_ShapeGroup, int ID)
    {
      if ((ShapeGroup == null))
      {
        throw new global::System.ArgumentNullException("ShapeGroup");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ShapeGroup));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ID));
      if ((Original_ShapeGroup == null))
      {
        throw new global::System.ArgumentNullException("Original_ShapeGroup");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_ShapeGroup));
      }
      this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string ShapeGroup, int Original_ID, string Original_ShapeGroup)
    {
      return this.Update(ShapeGroup, Original_ID, Original_ShapeGroup, Original_ID);
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadGazeFixations : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadGazeFixations()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "GazeFixations";
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("TrialID", "TrialID");
      tableMapping.ColumnMappings.Add("TrialSequence", "TrialSequence");
      tableMapping.ColumnMappings.Add("CountInTrial", "CountInTrial");
      tableMapping.ColumnMappings.Add("StartTime", "StartTime");
      tableMapping.ColumnMappings.Add("Length", "Length");
      tableMapping.ColumnMappings.Add("PosX", "PosX");
      tableMapping.ColumnMappings.Add("PosY", "PosY");
      tableMapping.ColumnMappings.Add("ID", "ID");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GazeFixations] WHERE (([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_CountInTrial = 1 AND [CountInTrial] IS NULL) OR ([CountInTrial] = @Original_CountInTrial)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_PosX = 1 AND [PosX] IS NULL) OR ([PosX] = @Original_PosX)) AND ((@IsNull_PosY = 1 AND [PosY] IS NULL) OR ([PosY] = @Original_PosY)) AND ([ID] = @Original_ID))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_StartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [GazeFixations] ([SubjectName], [TrialID], [TrialSequence], [CountInTrial], [StartTime], [Length], [PosX], [PosY]) VALUES (@SubjectName, @TrialID, @TrialSequence, @CountInTrial, @StartTime, @Length, @PosX, @PosY);
SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, ID FROM GazeFixations WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [GazeFixations] SET [SubjectName] = @SubjectName, [TrialID] = @TrialID, [TrialSequence] = @TrialSequence, [CountInTrial] = @CountInTrial, [StartTime] = @StartTime, [Length] = @Length, [PosX] = @PosX, [PosY] = @PosY WHERE (([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_CountInTrial = 1 AND [CountInTrial] IS NULL) OR ([CountInTrial] = @Original_CountInTrial)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_PosX = 1 AND [PosX] IS NULL) OR ([PosX] = @Original_PosX)) AND ((@IsNull_PosY = 1 AND [PosY] IS NULL) OR ([PosY] = @Original_PosY)) AND ([ID] = @Original_ID));
SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, ID FROM GazeFixations WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_StartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[8];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX" +
          ", PosY, ID FROM GazeFixations";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM [GazeFixations] ";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "DELETE FROM GazeFixations\r\nWHERE     (SubjectName = @Original_SubjectName)";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM GazeFixations WHERE (SubjectName = @Param1)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[4].Connection = this.Connection;
      this._commandCollection[4].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM GazeFixations WHERE (SubjectName = @Param1) AND (TrialSequence =" +
          " @Param2)";
      this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[5].Connection = this.Connection;
      this._commandCollection[5].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM GazeFixations WHERE (SubjectName = @Param1) AND (TrialID = @Para" +
          "m2)";
      this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[6].Connection = this.Connection;
      this._commandCollection[6].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM GazeFixations WHERE (TrialID = @Param1)";
      this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[6].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[7] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[7].Connection = this.Connection;
      this._commandCollection[7].CommandText = "SELECT     MAX(StartTime) AS MaxTime, TrialID\r\nFROM         GazeFixations\r\nGROUP " +
          "BY TrialID\r\nHAVING      (TrialID= @Param1)";
      this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.GazeFixationsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.GazeFixationsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.GazeFixationsDataTable dataTable = new SQLiteOgamaDataSet.GazeFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.GazeFixationsDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.GazeFixationsDataTable dataTable = new SQLiteOgamaDataSet.GazeFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.GazeFixationsDataTable GetDataBySubjectAndSequence(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[4];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.GazeFixationsDataTable dataTable = new SQLiteOgamaDataSet.GazeFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.GazeFixationsDataTable GetDataBySubjectAndTrialID(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[5];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.GazeFixationsDataTable dataTable = new SQLiteOgamaDataSet.GazeFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.GazeFixationsDataTable GetDataByTrialID(int Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[6];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      SQLiteOgamaDataSet.GazeFixationsDataTable dataTable = new SQLiteOgamaDataSet.GazeFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.GazeFixationsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "GazeFixations");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(string Original_SubjectName, int Original_TrialID, int Original_TrialSequence, global::System.Nullable<int> Original_CountInTrial, global::System.Nullable<long> Original_StartTime, global::System.Nullable<int> Original_Length, global::System.Nullable<double> Original_PosX, global::System.Nullable<double> Original_PosY, long Original_ID)
    {
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TrialID));
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TrialSequence));
      if ((Original_CountInTrial.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_CountInTrial.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Original_StartTime.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_StartTime.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((Original_Length.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Length.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
      }
      if ((Original_PosX.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_PosX.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
      }
      if ((Original_PosY.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_PosY.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, int TrialID, int TrialSequence, global::System.Nullable<int> CountInTrial, global::System.Nullable<long> StartTime, global::System.Nullable<int> Length, global::System.Nullable<double> PosX, global::System.Nullable<double> PosY)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TrialID));
      this.Adapter.InsertCommand.Parameters[2].Value = ((int)(TrialSequence));
      if ((CountInTrial.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[3].Value = ((int)(CountInTrial.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((StartTime.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((long)(StartTime.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Length.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Length.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((PosX.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((double)(PosX.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((PosY.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[7].Value = ((double)(PosY.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                int TrialSequence,
                global::System.Nullable<int> CountInTrial,
                global::System.Nullable<long> StartTime,
                global::System.Nullable<int> Length,
                global::System.Nullable<double> PosX,
                global::System.Nullable<double> PosY,
                string Original_SubjectName,
                int Original_TrialID,
                int Original_TrialSequence,
                global::System.Nullable<int> Original_CountInTrial,
                global::System.Nullable<long> Original_StartTime,
                global::System.Nullable<int> Original_Length,
                global::System.Nullable<double> Original_PosX,
                global::System.Nullable<double> Original_PosY,
                long Original_ID,
                long ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TrialID));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(TrialSequence));
      if ((CountInTrial.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(CountInTrial.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((StartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(StartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Length.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Length.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((PosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(PosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((PosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(PosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_TrialID));
      this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_TrialSequence));
      if ((Original_CountInTrial.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_CountInTrial.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      if ((Original_StartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_StartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
      }
      if ((Original_Length.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Length.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
      }
      if ((Original_PosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(Original_PosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
      }
      if ((Original_PosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_PosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
      }
      this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_ID));
      this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                int TrialSequence,
                global::System.Nullable<int> CountInTrial,
                global::System.Nullable<long> StartTime,
                global::System.Nullable<int> Length,
                global::System.Nullable<double> PosX,
                global::System.Nullable<double> PosY,
                string Original_SubjectName,
                int Original_TrialID,
                int Original_TrialSequence,
                global::System.Nullable<int> Original_CountInTrial,
                global::System.Nullable<long> Original_StartTime,
                global::System.Nullable<int> Original_Length,
                global::System.Nullable<double> Original_PosX,
                global::System.Nullable<double> Original_PosY,
                long Original_ID)
    {
      return this.Update(SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, Original_SubjectName, Original_TrialID, Original_TrialSequence, Original_CountInTrial, Original_StartTime, Original_Length, Original_PosX, Original_PosY, Original_ID, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteAll()
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteBySubject(string Original_SubjectName)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[2];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    public virtual object GetMaxStartTimeOfTrial(int Param1)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[7];
      command.Parameters[0].Value = ((int)(Param1));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      object returnValue;
      try
      {
        returnValue = command.ExecuteScalar();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      if (((returnValue == null)
                  || (returnValue.GetType() == typeof(global::System.DBNull))))
      {
        return null;
      }
      else
      {
        return ((object)(returnValue));
      }
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadMouseFixations : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadMouseFixations()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "MouseFixations";
      tableMapping.ColumnMappings.Add("SubjectName", "SubjectName");
      tableMapping.ColumnMappings.Add("TrialID", "TrialID");
      tableMapping.ColumnMappings.Add("TrialSequence", "TrialSequence");
      tableMapping.ColumnMappings.Add("CountInTrial", "CountInTrial");
      tableMapping.ColumnMappings.Add("StartTime", "StartTime");
      tableMapping.ColumnMappings.Add("Length", "Length");
      tableMapping.ColumnMappings.Add("PosX", "PosX");
      tableMapping.ColumnMappings.Add("PosY", "PosY");
      tableMapping.ColumnMappings.Add("ID", "ID");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = @"DELETE FROM [MouseFixations] WHERE (([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_CountInTrial = 1 AND [CountInTrial] IS NULL) OR ([CountInTrial] = @Original_CountInTrial)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_PosX = 1 AND [PosX] IS NULL) OR ([PosX] = @Original_PosX)) AND ((@IsNull_PosY = 1 AND [PosY] IS NULL) OR ([PosY] = @Original_PosY)) AND ([ID] = @Original_ID))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_StartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = @"INSERT INTO [MouseFixations] ([SubjectName], [TrialID], [TrialSequence], [CountInTrial], [StartTime], [Length], [PosX], [PosY]) VALUES (@SubjectName, @TrialID, @TrialSequence, @CountInTrial, @StartTime, @Length, @PosX, @PosY);
SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, ID FROM MouseFixations WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [MouseFixations] SET [SubjectName] = @SubjectName, [TrialID] = @TrialID, [TrialSequence] = @TrialSequence, [CountInTrial] = @CountInTrial, [StartTime] = @StartTime, [Length] = @Length, [PosX] = @PosX, [PosY] = @PosY WHERE (([SubjectName] = @Original_SubjectName) AND ([TrialID] = @Original_TrialID) AND ([TrialSequence] = @Original_TrialSequence) AND ((@IsNull_CountInTrial = 1 AND [CountInTrial] IS NULL) OR ([CountInTrial] = @Original_CountInTrial)) AND ((@IsNull_StartTime = 1 AND [StartTime] IS NULL) OR ([StartTime] = @Original_StartTime)) AND ((@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_PosX = 1 AND [PosX] IS NULL) OR ([PosX] = @Original_PosX)) AND ((@IsNull_PosY = 1 AND [PosY] IS NULL) OR ([PosY] = @Original_PosY)) AND ([ID] = @Original_ID));
SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, ID FROM MouseFixations WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_TrialSequence", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_CountInTrial", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountInTrial", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_StartTime", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_StartTime", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Length", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosX", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosX", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosX", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_PosY", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_PosY", global::System.Data.DbType.Single, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PosY", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int64, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int64, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[8];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX" +
          ", PosY, ID FROM MouseFixations";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[1].Connection = this.Connection;
      this._commandCollection[1].CommandText = "DELETE FROM [MouseFixations]";
      this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[2].Connection = this.Connection;
      this._commandCollection[2].CommandText = "DELETE FROM MouseFixations\r\nWHERE     (SubjectName = @Original_SubjectName)";
      this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[2].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_SubjectName", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Original, false, null));
      this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[3].Connection = this.Connection;
      this._commandCollection[3].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM MouseFixations WHERE (SubjectName = @Param1)";
      this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[3].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[4].Connection = this.Connection;
      this._commandCollection[4].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM MouseFixations WHERE (SubjectName = @Param1) AND (TrialSequence " +
          "= @Param2)";
      this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[4].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialSequence", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[5].Connection = this.Connection;
      this._commandCollection[5].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM MouseFixations WHERE (SubjectName = @Param1) AND (TrialID = @Par" +
          "am2)";
      this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.String, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubjectName", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[5].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param2", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[6] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[6].Connection = this.Connection;
      this._commandCollection[6].CommandText = "SELECT CountInTrial, ID, Length, PosX, PosY, StartTime, SubjectName, TrialID, Tri" +
          "alSequence FROM MouseFixations WHERE (TrialID = @Param1)";
      this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[6].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
      this._commandCollection[7] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[7].Connection = this.Connection;
      this._commandCollection[7].CommandText = "SELECT     MAX(StartTime) AS MaxTime, TrialID\r\nFROM         MouseFixations\r\nGROUP" +
          " BY TrialID\r\nHAVING      (TrialID= @Param1)";
      this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
      this._commandCollection[7].Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param1", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TrialID", global::System.Data.DataRowVersion.Current, false, null));
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.MouseFixationsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.MouseFixationsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.MouseFixationsDataTable dataTable = new SQLiteOgamaDataSet.MouseFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.MouseFixationsDataTable GetDataBySubject(string Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[3];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      SQLiteOgamaDataSet.MouseFixationsDataTable dataTable = new SQLiteOgamaDataSet.MouseFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.MouseFixationsDataTable GetDataBySubjectAndSequence(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[4];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.MouseFixationsDataTable dataTable = new SQLiteOgamaDataSet.MouseFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.MouseFixationsDataTable GetDataBySubjectAndTrialID(string Param1, int Param2)
    {
      this.Adapter.SelectCommand = this.CommandCollection[5];
      if ((Param1 == null))
      {
        throw new global::System.ArgumentNullException("Param1");
      }
      else
      {
        this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
      }
      this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Param2));
      SQLiteOgamaDataSet.MouseFixationsDataTable dataTable = new SQLiteOgamaDataSet.MouseFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
    public virtual SQLiteOgamaDataSet.MouseFixationsDataTable GetDataByTrialID(int Param1)
    {
      this.Adapter.SelectCommand = this.CommandCollection[6];
      this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param1));
      SQLiteOgamaDataSet.MouseFixationsDataTable dataTable = new SQLiteOgamaDataSet.MouseFixationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.MouseFixationsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "MouseFixations");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(string Original_SubjectName, int Original_TrialID, int Original_TrialSequence, global::System.Nullable<int> Original_CountInTrial, global::System.Nullable<long> Original_StartTime, global::System.Nullable<int> Original_Length, global::System.Nullable<double> Original_PosX, global::System.Nullable<double> Original_PosY, long Original_ID)
    {
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TrialID));
      this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_TrialSequence));
      if ((Original_CountInTrial.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_CountInTrial.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Original_StartTime.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_StartTime.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((Original_Length.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Length.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
      }
      if ((Original_PosX.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_PosX.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
      }
      if ((Original_PosY.HasValue == true))
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_PosY.Value));
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string SubjectName, int TrialID, int TrialSequence, global::System.Nullable<int> CountInTrial, global::System.Nullable<long> StartTime, global::System.Nullable<int> Length, global::System.Nullable<double> PosX, global::System.Nullable<double> PosY)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TrialID));
      this.Adapter.InsertCommand.Parameters[2].Value = ((int)(TrialSequence));
      if ((CountInTrial.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[3].Value = ((int)(CountInTrial.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((StartTime.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[4].Value = ((long)(StartTime.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Length.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Length.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((PosX.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[6].Value = ((double)(PosX.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((PosY.HasValue == true))
      {
        this.Adapter.InsertCommand.Parameters[7].Value = ((double)(PosY.Value));
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                int TrialSequence,
                global::System.Nullable<int> CountInTrial,
                global::System.Nullable<long> StartTime,
                global::System.Nullable<int> Length,
                global::System.Nullable<double> PosX,
                global::System.Nullable<double> PosY,
                string Original_SubjectName,
                int Original_TrialID,
                int Original_TrialSequence,
                global::System.Nullable<int> Original_CountInTrial,
                global::System.Nullable<long> Original_StartTime,
                global::System.Nullable<int> Original_Length,
                global::System.Nullable<double> Original_PosX,
                global::System.Nullable<double> Original_PosY,
                long Original_ID,
                long ID)
    {
      if ((SubjectName == null))
      {
        throw new global::System.ArgumentNullException("SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TrialID));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(TrialSequence));
      if ((CountInTrial.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(CountInTrial.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      if ((StartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(StartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
      }
      if ((Length.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Length.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      if ((PosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(PosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
      }
      if ((PosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(PosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
      }
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_SubjectName));
      }
      this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_TrialID));
      this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_TrialSequence));
      if ((Original_CountInTrial.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_CountInTrial.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
      }
      if ((Original_StartTime.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_StartTime.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
      }
      if ((Original_Length.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Length.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
      }
      if ((Original_PosX.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(Original_PosX.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
      }
      if ((Original_PosY.HasValue == true))
      {
        this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_PosY.Value));
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
      }
      this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_ID));
      this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(
                string SubjectName,
                int TrialID,
                int TrialSequence,
                global::System.Nullable<int> CountInTrial,
                global::System.Nullable<long> StartTime,
                global::System.Nullable<int> Length,
                global::System.Nullable<double> PosX,
                global::System.Nullable<double> PosY,
                string Original_SubjectName,
                int Original_TrialID,
                int Original_TrialSequence,
                global::System.Nullable<int> Original_CountInTrial,
                global::System.Nullable<long> Original_StartTime,
                global::System.Nullable<int> Original_Length,
                global::System.Nullable<double> Original_PosX,
                global::System.Nullable<double> Original_PosY,
                long Original_ID)
    {
      return this.Update(SubjectName, TrialID, TrialSequence, CountInTrial, StartTime, Length, PosX, PosY, Original_SubjectName, Original_TrialID, Original_TrialSequence, Original_CountInTrial, Original_StartTime, Original_Length, Original_PosX, Original_PosY, Original_ID, Original_ID);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteAll()
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
    public virtual int DeleteBySubject(string Original_SubjectName)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[2];
      if ((Original_SubjectName == null))
      {
        throw new global::System.ArgumentNullException("Original_SubjectName");
      }
      else
      {
        command.Parameters[0].Value = ((string)(Original_SubjectName));
      }
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      int returnValue;
      try
      {
        returnValue = command.ExecuteNonQuery();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      return returnValue;
    }



  
    public virtual object GetMaxStartTimeOfTrial(int Param1)
    {
      global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[7];
      command.Parameters[0].Value = ((int)(Param1));
      global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
      if (((command.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        command.Connection.Open();
      }
      object returnValue;
      try
      {
        returnValue = command.ExecuteScalar();
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          command.Connection.Close();
        }
      }
      if (((returnValue == null)
                  || (returnValue.GetType() == typeof(global::System.DBNull))))
      {
        return null;
      }
      else
      {
        return ((object)(returnValue));
      }
    }
  }

  /// <summary>
  ///Represents the connection and commands used to retrieve and save data.
  ///</summary>






  public partial class SQLiteTadParams : global::System.ComponentModel.Component
  {

    private global::System.Data.SQLite.SQLiteDataAdapter _adapter;

    private global::System.Data.SQLite.SQLiteConnection _connection;

    private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;

    private bool _clearBeforeFill;



    public SQLiteTadParams()
    {
      this.ClearBeforeFill = true;
    }



    private global::System.Data.SQLite.SQLiteDataAdapter Adapter
    {
      get
      {
        if ((this._adapter == null))
        {
          this.InitAdapter();
        }
        return this._adapter;
      }
    }



    internal global::System.Data.SQLite.SQLiteConnection Connection
    {
      get
      {
        if ((this._connection == null))
        {
          this.InitConnection();
        }
        return this._connection;
      }
      set
      {
        this._connection = value;
        if ((this.Adapter.InsertCommand != null))
        {
          this.Adapter.InsertCommand.Connection = value;
        }
        if ((this.Adapter.DeleteCommand != null))
        {
          this.Adapter.DeleteCommand.Connection = value;
        }
        if ((this.Adapter.UpdateCommand != null))
        {
          this.Adapter.UpdateCommand.Connection = value;
        }
        for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
        {
          if ((this.CommandCollection[i] != null))
          {
            ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
          }
        }
      }
    }



    protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection
    {
      get
      {
        if ((this._commandCollection == null))
        {
          this.InitCommandCollection();
        }
        return this._commandCollection;
      }
    }



    public bool ClearBeforeFill
    {
      get
      {
        return this._clearBeforeFill;
      }
      set
      {
        this._clearBeforeFill = value;
      }
    }



    private void InitAdapter()
    {
      this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
      global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "Params";
      tableMapping.ColumnMappings.Add("ID", "ID");
      tableMapping.ColumnMappings.Add("Param", "Param");
      tableMapping.ColumnMappings.Add("Description", "Description");
      this._adapter.TableMappings.Add(tableMapping);
      this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.DeleteCommand.Connection = this.Connection;
      this._adapter.DeleteCommand.CommandText = "DELETE FROM [Params] WHERE (([ID] = @Original_ID) AND ([Param] = @Original_" +
          "Param) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description" +
          "] = @Original_Description)))";
      this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Description", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Description", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.InsertCommand.Connection = this.Connection;
      this._adapter.InsertCommand.CommandText = "INSERT INTO [Params] ([Param], [Description]) VALUES (@Param, @Description)" +
          ";\r\nSELECT ID, Param, Description FROM Params WHERE (ID = SCOPE_IDENTITY())";
      this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Description", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
      this._adapter.UpdateCommand.Connection = this.Connection;
      this._adapter.UpdateCommand.CommandText = @"UPDATE [Params] SET [Param] = @Param, [Description] = @Description WHERE (([ID] = @Original_ID) AND ([Param] = @Original_Param) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT ID, Param, Description FROM Params WHERE (ID = @ID)";
      this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Description", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_ID", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Param", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Param", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@IsNull_Description", global::System.Data.DbType.Int32, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, true, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@Original_Description", global::System.Data.DbType.String, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null));
      this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SQLite.SQLiteParameter("@ID", global::System.Data.DbType.Int32, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null));
    }



    private void InitConnection()
    {
      this._connection = new global::System.Data.SQLite.SQLiteConnection();
      this._connection.ConnectionString = global::Ogama.Properties.Settings.Default.OgamaDatabaseTemplateConnectionString;
    }



    private void InitCommandCollection()
    {
      this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
      this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
      this._commandCollection[0].Connection = this.Connection;
      this._commandCollection[0].CommandText = "SELECT ID, Param, Description FROM Params";
      this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
    public virtual int Fill(SQLiteOgamaDataSet.ParamsDataTable dataTable)
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if ((this.ClearBeforeFill == true))
      {
        dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
    public virtual SQLiteOgamaDataSet.ParamsDataTable GetData()
    {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      SQLiteOgamaDataSet.ParamsDataTable dataTable = new SQLiteOgamaDataSet.ParamsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
    }



  
    public virtual int Update(SQLiteOgamaDataSet.ParamsDataTable dataTable)
    {
      return this.Adapter.Update(dataTable);
    }



  
    public virtual int Update(SQLiteOgamaDataSet dataSet)
    {
      return this.Adapter.Update(dataSet, "Params");
    }



  
    public virtual int Update(global::System.Data.DataRow dataRow)
    {
      return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
    }



  
    public virtual int Update(global::System.Data.DataRow[] dataRows)
    {
      return this.Adapter.Update(dataRows);
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
    public virtual int Delete(int Original_ID, string Original_Param, string Original_Description)
    {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
      if ((Original_Param == null))
      {
        throw new global::System.ArgumentNullException("Original_Param");
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Param));
      }
      if ((Original_Description == null))
      {
        this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
        this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
        this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Description));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.DeleteCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.DeleteCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
    public virtual int Insert(string Param, string Description)
    {
      if ((Param == null))
      {
        throw new global::System.ArgumentNullException("Param");
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Param));
      }
      if ((Description == null))
      {
        this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
      }
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.InsertCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.InsertCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string Param, string Description, int Original_ID, string Original_Param, string Original_Description, int ID)
    {
      if ((Param == null))
      {
        throw new global::System.ArgumentNullException("Param");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Param));
      }
      if ((Description == null))
      {
        this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
      }
      this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
      if ((Original_Param == null))
      {
        throw new global::System.ArgumentNullException("Original_Param");
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Param));
      }
      if ((Original_Description == null))
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
        this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
      }
      else
      {
        this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
        this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Description));
      }
      this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
      global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                  != global::System.Data.ConnectionState.Open))
      {
        this.Adapter.UpdateCommand.Connection.Open();
      }
      try
      {
        int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
        return returnValue;
      }
      finally
      {
        if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
        {
          this.Adapter.UpdateCommand.Connection.Close();
        }
      }
    }



  
    [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
    public virtual int Update(string Param, string Description, int Original_ID, string Original_Param, string Original_Description)
    {
      return this.Update(Param, Description, Original_ID, Original_Param, Original_Description, Original_ID);
    }
  }
}

#pragma warning restore 1591